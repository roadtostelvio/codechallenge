var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
define("xrm-mock/controls/addcontrolnotificationoptions/addcontrolnotificationoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddControlNotificationOptionsMock = void 0;
    var AddControlNotificationOptionsMock = /** @class */ (function () {
        function AddControlNotificationOptionsMock(components) {
            this.actions = components.actions;
            this.messages = components.messages;
            this.notificationLevel = components.notificationLevel;
            this.uniqueId = components.uniqueId;
        }
        return AddControlNotificationOptionsMock;
    }());
    exports.AddControlNotificationOptionsMock = AddControlNotificationOptionsMock;
});
define("xrm-mock/navigation/alertstrings/alertstrings.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlertStringsMock = void 0;
    var AlertStringsMock = /** @class */ (function () {
        function AlertStringsMock(text, confirmButtonLabel) {
            this.text = text;
            this.confirmButtonLabel = confirmButtonLabel;
        }
        return AlertStringsMock;
    }());
    exports.AlertStringsMock = AlertStringsMock;
});
define("xrm-mock/appproperties/appproperties.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AppPropertiesMock = void 0;
    var AppPropertiesMock = /** @class */ (function () {
        function AppPropertiesMock(components) {
            this.appId = components.appId;
            this.displayName = components.displayName;
            this.uniqueName = components.uniqueName;
            this.url = components.url;
            this.webResourceId = components.webResourceId;
            this.webResourceName = components.webResourceName;
            this.welcomePageId = components.welcomePageId;
            this.welcomePageName = components.welcomePageName;
        }
        return AppPropertiesMock;
    }());
    exports.AppPropertiesMock = AppPropertiesMock;
});
define("xrm-mock/metadata/attributemetadata/attributemetadata.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttributeMetadataMock = void 0;
    var AttributeMetadataMock = /** @class */ (function () {
        function AttributeMetadataMock(components) {
            this.DefaultFormValue = components.DefaultFormValue;
            this.LogicalName = components.LogicalName;
            this.DisplayName = components.DisplayName;
            this.AttributeType = components.AttributeType;
            this.EntityLogicalName = components.EntityLogicalName;
            this.OptionSet = components.OptionSet;
        }
        return AttributeMetadataMock;
    }());
    exports.AttributeMetadataMock = AttributeMetadataMock;
});
define("xrm-mock-generator/helpers/array.helper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findIndex = void 0;
    function findIndex(handlers, handler) {
        return handlers.findIndex(function (item) { return item.name === handler.name; });
    }
    exports.findIndex = findIndex;
});
define("xrm-mock/app/app.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AppMock = void 0;
    var AppMock = /** @class */ (function () {
        function AppMock() {
        }
        AppMock.prototype.addGlobalNotification = function (notification) {
            throw new Error("Method not implemented.");
        };
        AppMock.prototype.clearGlobalNotification = function (uniqueId) {
            throw new Error("Method not implemented.");
        };
        return AppMock;
    }());
    exports.AppMock = AppMock;
});
define("xrm-mock-generator/app", ["require", "exports", "xrm-mock/app/app.mock"], function (require, exports, app_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var App = /** @class */ (function () {
        function App() {
        }
        App.createApp = function () {
            var app = new app_mock_1.AppMock();
            return app;
        };
        return App;
    }());
    exports.default = App;
});
define("xrm-mock-generator/form", ["require", "exports", "xrm-mock/index"], function (require, exports, XrmMock) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Form = /** @class */ (function () {
        function Form() {
        }
        Form.createBlankForm = function () {
            var formItem = new XrmMock.FormItemMock({
                currentItem: true,
                formType: 1,
                id: "{00000000-0000-0000-0000-000000000000}",
                label: "",
            });
            return formItem;
        };
        return Form;
    }());
    exports.default = Form;
});
define("xrm-mock-generator/ui", ["require", "exports", "xrm-mock/index", "xrm-mock-generator/form"], function (require, exports, XrmMock, form_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Ui = /** @class */ (function () {
        function Ui() {
        }
        Ui.createUi = function () {
            var ui = new XrmMock.UiMock({
                controls: new XrmMock.ItemCollectionMock([]),
                formSelector: new XrmMock.FormSelectorMock(new XrmMock.ItemCollectionMock([form_1.default.createBlankForm()])),
                tabs: new XrmMock.ItemCollectionMock([]),
            });
            return ui;
        };
        Ui.createLabelElement = function (label) {
            return new XrmMock.UiLabelElementMock(label);
        };
        Ui.createCanGetVisibleElement = function (isVisible) {
            return new XrmMock.UiCanGetVisibleElementMock(isVisible);
        };
        Ui.createStandardElement = function (labelElement, visibleElement) {
            return new XrmMock.UiStandardElementMock(labelElement, visibleElement);
        };
        return Ui;
    }());
    exports.default = Ui;
});
define("xrm-mock-generator/control", ["require", "exports", "xrm-mock/index"], function (require, exports, XrmMock) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Control = /** @class */ (function () {
        function Control() {
        }
        Control.prototype.createBoolean = function (attributeOrComponents, name, visible, disabled, label) {
            if (visible === void 0) { visible = true; }
            if (disabled === void 0) { disabled = false; }
            var components = this.createStandardComponent(attributeOrComponents, name, visible, disabled, label);
            return this.addControl(new XrmMock.BooleanControlMock(components));
        };
        Control.prototype.createDate = function (attributeOrComponents, name, visible, disabled, label) {
            if (visible === void 0) { visible = true; }
            if (disabled === void 0) { disabled = false; }
            var components = this.createStandardComponent(attributeOrComponents, name, visible, disabled, label);
            return this.addControl(new XrmMock.DateControlMock(components));
        };
        Control.prototype.createGrid = function (nameOrComponents, visible, label) {
            if (visible === void 0) { visible = true; }
            var components = nameOrComponents.name
                ? nameOrComponents
                : {
                    label: label,
                    name: nameOrComponents,
                    visible: visible
                };
            return this.addControl(new XrmMock.GridControlMock(components));
        };
        Control.prototype.createLookup = function (attributeOrComponents, name, visible, disabled, label) {
            if (visible === void 0) { visible = true; }
            if (disabled === void 0) { disabled = false; }
            var components = this.createStandardComponent(attributeOrComponents, name, visible, disabled, label);
            return this.addControl(new XrmMock.LookupControlMock(components));
        };
        Control.prototype.createNumber = function (attributeOrComponents, name, visible, disabled, label) {
            if (visible === void 0) { visible = true; }
            if (disabled === void 0) { disabled = false; }
            var components = this.createStandardComponent(attributeOrComponents, name, visible, disabled, label);
            return this.addControl(new XrmMock.NumberControlMock(components));
        };
        Control.prototype.createOptionSet = function (attributeOrComponents, name, visible, disabled, label) {
            if (visible === void 0) { visible = true; }
            if (disabled === void 0) { disabled = false; }
            var components = this.createStandardComponent(attributeOrComponents, name, visible, disabled, label);
            return this.addControl(new XrmMock.OptionSetControlMock(components));
        };
        Control.prototype.createString = function (attributeOrComponents, name, visible, disabled, label) {
            var components = this.createStandardComponent(attributeOrComponents, name, visible, disabled, label);
            return this.addControl(new XrmMock.StringControlMock(components));
        };
        Control.prototype.addControl = function (control) {
            Xrm.Page.ui.controls.push(control);
            return control;
        };
        Control.prototype.createStandardComponent = function (attributeOrComponents, name, visible, disabled, label) {
            var att = attributeOrComponents;
            return att.controls && att.eventHandlers
                ? {
                    attribute: attributeOrComponents,
                    disabled: disabled,
                    label: label || name,
                    name: name,
                    visible: visible,
                }
                : attributeOrComponents;
        };
        return Control;
    }());
    exports.default = Control;
});
define("xrm-mock-generator/attribute", ["require", "exports", "xrm-mock/index", "xrm-mock-generator/control"], function (require, exports, XrmMock, control_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Attribute = /** @class */ (function () {
        function Attribute() {
            this.Control = new control_1.default();
        }
        Attribute.prototype.createBoolean = function (nameOrComponents, valueOrControlComponents) {
            if (typeof (nameOrComponents) === "string") {
                var components = { name: nameOrComponents, value: valueOrControlComponents };
                var controls = [{ name: nameOrComponents }];
                return this.associateAttribute(new XrmMock.BooleanAttributeMock(components), controls, "createBoolean");
            }
            else {
                return this.associateAttribute(new XrmMock.BooleanAttributeMock(nameOrComponents), this.arrayify(valueOrControlComponents), "createBoolean");
            }
        };
        Attribute.prototype.createDate = function (nameOrComponents, valueOrControlComponents) {
            if (typeof (nameOrComponents) === "string") {
                var components = { name: nameOrComponents, value: valueOrControlComponents };
                var controls = [{ name: nameOrComponents }];
                return this.associateAttribute(new XrmMock.DateAttributeMock(components), controls, "createDate");
            }
            else {
                return this.associateAttribute(new XrmMock.DateAttributeMock(nameOrComponents), this.arrayify(valueOrControlComponents), "createDate");
            }
        };
        Attribute.prototype.createLookup = function (nameOrComponents, valueOrControlComponents) {
            if (typeof (nameOrComponents) === "string") {
                var components = {
                    isPartyList: valueOrControlComponents && Array.isArray(valueOrControlComponents),
                    name: nameOrComponents,
                    value: this.arrayify(valueOrControlComponents)
                };
                var controls = [{ name: nameOrComponents }];
                return this.associateAttribute(new XrmMock.LookupAttributeMock(components), controls, "createLookup");
            }
            else {
                return this.associateAttribute(new XrmMock.LookupAttributeMock(nameOrComponents), this.arrayify(valueOrControlComponents), "createLookup");
            }
        };
        Attribute.prototype.createNumber = function (nameOrComponents, valueOrControlComponents) {
            if (typeof (nameOrComponents) === "string") {
                var components = { name: nameOrComponents, value: valueOrControlComponents };
                var controls = [{ name: nameOrComponents }];
                return this.associateAttribute(new XrmMock.NumberAttributeMock(components), controls, "createNumber");
            }
            else {
                return this.associateAttribute(new XrmMock.NumberAttributeMock(nameOrComponents), this.arrayify(valueOrControlComponents), "createNumber");
            }
        };
        Attribute.prototype.createOptionSet = function (nameOrComponents, valueOrControlComponents, options) {
            return typeof (nameOrComponents) === "string"
                ? this.createOptionSetFromParameters(nameOrComponents, valueOrControlComponents, options)
                : this.createOptionSetFromComponents(nameOrComponents, this.arrayify(valueOrControlComponents));
        };
        Attribute.prototype.createString = function (nameOrComponents, valueOrControlComponents) {
            if (valueOrControlComponents === void 0) { valueOrControlComponents = ""; }
            if (typeof (nameOrComponents) === "string") {
                var components = { name: nameOrComponents, value: valueOrControlComponents };
                var controls = [{ name: nameOrComponents }];
                return this.associateAttribute(new XrmMock.StringAttributeMock(components), controls, "createString");
            }
            else {
                return this.associateAttribute(new XrmMock.StringAttributeMock(nameOrComponents), this.arrayify(valueOrControlComponents), "createString");
            }
        };
        Attribute.prototype.createOptionSetFromParameters = function (name, value, options) {
            var num;
            if (value !== null
                && value !== undefined) {
                if (!options) {
                    options = [typeof value === "string"
                            ? { text: value, value: 0 }
                            : { text: value.toString(), value: value }];
                }
                if (typeof value === "string") {
                    var option = options.filter(function (o) { return o.text === value; })[0];
                    num = option.value;
                }
                else {
                    num = value;
                }
            }
            else {
                num = undefined;
            }
            var components = {
                name: name,
                options: options,
            };
            if (num || num === 0) {
                components.value = num;
            }
            var controls = [{ name: name, options: options }];
            return this.associateAttribute(new XrmMock.OptionSetAttributeMock(components), controls, "createOptionSet");
        };
        Attribute.prototype.createOptionSetFromComponents = function (components, controls) {
            if (components.options && components.options.length > 0) {
                controls.filter(function (c) { return !c.options; })
                    .forEach(function (c) {
                    c.options = components.options;
                });
            }
            return this.associateAttribute(new XrmMock.OptionSetAttributeMock(components), controls, "createOptionSet");
        };
        Attribute.prototype.createStringFromParameters = function (name, value) {
            var components = { name: name, value: value };
            var controls = [{ name: name }];
            return this.associateAttribute(new XrmMock.StringAttributeMock(components), controls, "createString");
        };
        Attribute.prototype.createAttribute = function (name, value) {
            var attribute = new XrmMock.AttributeMock({
                isDirty: false,
                name: name,
                submitMode: "dirty",
                value: value,
            });
            return attribute;
        };
        Attribute.prototype.addAttribute = function (attribute) {
            Xrm.Page.data.entity.attributes.push(attribute);
        };
        /**
         * Creates the given attribute, as well as the controls for the attribute defined by the components
         * @param attribute The newly created attribute to be added to the page colleciton of attributes
         * @param controls Array of Control Components to create controls for the given attribute
         * @param controlCreateFunction the name of the Control function to call to create the correct type of control
         */
        Attribute.prototype.associateAttribute = function (attribute, controls, controlCreateFunction) {
            var _this = this;
            this.addAttribute(attribute);
            controls.forEach(function (c) {
                c.attribute = attribute;
                _this.defaultName(c, attribute);
                _this.Control[controlCreateFunction](c);
            });
            return attribute;
        };
        Attribute.prototype.defaultName = function (control, attribute) {
            var names = [];
            attribute.controls.forEach(function (c) {
                names.push(c.getName());
            });
            if (!control.name) {
                control.name = attribute.getName();
            }
            else if (names.indexOf(control.name) >= 0) {
                throw new Error("Name " + control.name + " has already been defined for a control for attribute " + attribute.getName());
            }
            var i = 1;
            while (names.indexOf(control.name) >= 0) {
                control.name = attribute.getName() + i++;
            }
        };
        Attribute.prototype.arrayify = function (possibleArray) {
            if (!possibleArray) {
                return [];
            }
            else if (possibleArray instanceof Array) {
                return possibleArray;
            }
            else {
                return [possibleArray];
            }
        };
        return Attribute;
    }());
    exports.default = Attribute;
});
define("xrm-mock-generator/context", ["require", "exports", "xrm-mock/index"], function (require, exports, XrmMock) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Context = /** @class */ (function () {
        function Context() {
        }
        Context.createContext = function (client) {
            var context = new XrmMock.ContextMock({
                clientContext: new XrmMock.ClientContextMock(client || "Web", "Online"),
                orgUniqueName: "",
                userSettings: new XrmMock.UserSettingsMock({
                    isGuidedHelpEnabled: false,
                    isHighContrastEnabled: false,
                    isRTL: false,
                    securityRolePrivileges: [],
                    securityRoles: [],
                    userId: "{00000000-0000-0000-0000-000000000000}",
                    userName: "jdoe",
                }),
            });
            return context;
        };
        return Context;
    }());
    exports.default = Context;
});
define("xrm-mock/device/device.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeviceMock = void 0;
    var DeviceMock = /** @class */ (function () {
        function DeviceMock() {
        }
        DeviceMock.prototype.captureAudio = function () {
            throw new Error("Not implemented.");
        };
        DeviceMock.prototype.captureImage = function (imageOptions) {
            throw new Error("Not implemented.");
        };
        DeviceMock.prototype.captureVideo = function () {
            throw new Error("Not implemented.");
        };
        DeviceMock.prototype.getBarcodeValue = function () {
            throw new Error("Not implemented.");
        };
        DeviceMock.prototype.getCurrentPosition = function () {
            throw new Error("Not implemented.");
        };
        DeviceMock.prototype.pickFile = function (pickFileOptions) {
            throw new Error("Not implemented.");
        };
        return DeviceMock;
    }());
    exports.DeviceMock = DeviceMock;
});
define("xrm-mock-generator/device", ["require", "exports", "xrm-mock/device/device.mock"], function (require, exports, device_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Device = /** @class */ (function () {
        function Device() {
        }
        Device.createDevice = function () {
            var device = new device_mock_1.DeviceMock();
            return device;
        };
        return Device;
    }());
    exports.default = Device;
});
define("xrm-mock/collection/itemcollection/itemcollection.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemCollectionMock = void 0;
    var ItemCollectionMock = /** @class */ (function () {
        function ItemCollectionMock(itemCollection) {
            this.itemCollection = itemCollection || [];
        }
        ItemCollectionMock.prototype.forEach = function (delegate) {
            this.itemCollection.map(delegate);
        };
        ItemCollectionMock.prototype.get = function (param) {
            if (param === undefined || param === null) {
                return this.itemCollection;
            }
            else if (typeof param === "string") {
                var attribute = void 0;
                for (var _i = 0, _a = this.itemCollection; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item.getName !== undefined && item.getName() === param) {
                        attribute = item;
                        break;
                    }
                }
                return attribute || null;
            }
            else if (typeof param === "number") {
                return this.itemCollection[param] || null;
            }
            else {
                return this.itemCollection.filter(param);
            }
        };
        ItemCollectionMock.prototype.getLength = function () {
            return this.itemCollection.length;
        };
        ItemCollectionMock.prototype.push = function (item) {
            this.itemCollection.push(item);
        };
        return ItemCollectionMock;
    }());
    exports.ItemCollectionMock = ItemCollectionMock;
});
define("xrm-mock/controls/formitem/formitem.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormItemMock = void 0;
    var FormItemMock = /** @class */ (function () {
        function FormItemMock(components) {
            this.id = components.id;
            this.label = components.label;
            this.formType = components.formType;
            this.currentItem = components.currentItem;
        }
        FormItemMock.prototype.getId = function () {
            return this.id;
        };
        FormItemMock.prototype.getLabel = function () {
            return this.label;
        };
        FormItemMock.prototype.navigate = function () {
            throw new Error("Form navigation not implemented.");
        };
        FormItemMock.prototype.getVisible = function () {
            throw new Error("getVisible not implemented.");
        };
        FormItemMock.prototype.setVisible = function (value) {
            throw new Error("setVisible not implemented.");
        };
        return FormItemMock;
    }());
    exports.FormItemMock = FormItemMock;
});
define("xrm-mock/controls/formselector/formselector.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormSelectorMock = void 0;
    var FormSelectorMock = /** @class */ (function () {
        function FormSelectorMock(items) {
            this.items = items;
        }
        FormSelectorMock.prototype.getCurrentItem = function () {
            var currentItem;
            if (this.items.itemCollection && this.items.itemCollection.length) {
                currentItem = this.items.itemCollection.filter(function (i) { return i.currentItem; })[0] || null;
            }
            return currentItem;
        };
        return FormSelectorMock;
    }());
    exports.FormSelectorMock = FormSelectorMock;
});
define("xrm-mock/ui/ui.mock", ["require", "exports", "xrm-mock/collection/itemcollection/itemcollection.mock"], function (require, exports, itemcollection_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UiMock = void 0;
    var UiMock = /** @class */ (function () {
        function UiMock(components) {
            this.process = components.process;
            this.controls = components.controls || new itemcollection_mock_1.ItemCollectionMock([]);
            this.formSelector = components.formSelector;
            this.navigation = components.navigation;
            this.tabs = components.tabs || new itemcollection_mock_1.ItemCollectionMock([]);
            this.quickForms = components.quickForms || new itemcollection_mock_1.ItemCollectionMock([]);
        }
        UiMock.prototype.setFormNotification = function (message, level, uniqueId) {
            var formNotificationAlreadyExists = false;
            if (this.formNotifications && this.formNotifications.length) {
                formNotificationAlreadyExists = this._getFormNotificationExists(this.formNotifications, uniqueId);
            }
            if (formNotificationAlreadyExists) {
                return false;
            }
            else {
                if (this.formNotifications && this.formNotifications.length) {
                    this.formNotifications.push({ message: message, level: level, uniqueId: uniqueId });
                }
                else {
                    this.formNotifications = [{ message: message, level: level, uniqueId: uniqueId }];
                }
                return true;
            }
        };
        UiMock.prototype.clearFormNotification = function (uniqueId) {
            if (this.formNotifications && this.formNotifications.length) {
                var matchingNotificationsById = this.formNotifications.filter(function (item) {
                    return item.uniqueId === uniqueId;
                });
                if (matchingNotificationsById && matchingNotificationsById.length) {
                    var index = this.formNotifications.indexOf(matchingNotificationsById[0]);
                    this.formNotifications.splice(index, 1);
                    return true;
                }
                else {
                    return false;
                }
            }
            return false;
        };
        UiMock.prototype.close = function () {
            throw new Error(("close not implemented"));
        };
        UiMock.prototype.getFormType = function () {
            if (this.formSelector) {
                var currentForm = this.formSelector.getCurrentItem();
                if (currentForm) {
                    return currentForm.formType;
                }
            }
            else {
                return 0 /* Undefined */;
            }
        };
        UiMock.prototype.getViewPortHeight = function () {
            throw new Error(("getViewPortHeight not implemented"));
        };
        UiMock.prototype.getViewPortWidth = function () {
            throw new Error(("getViewPortWidth not implemented"));
        };
        UiMock.prototype.refreshRibbon = function () {
            throw new Error(("refreshRibbon not implemented"));
        };
        UiMock.prototype.setFormEntityName = function (arg) {
            throw new Error(("setFormEntityName not implemented"));
        };
        UiMock.prototype.addOnLoad = function (handler) {
            throw new Error(("addOnLoad not implemented"));
        };
        UiMock.prototype.removeOnLoad = function (handler) {
            throw new Error(("removeOnLoad not implemented"));
        };
        UiMock.prototype._getFormNotificationExists = function (notifications, uniqueId) {
            var matchingNotificationsById = notifications.filter(function (item) {
                return item.uniqueId === uniqueId;
            });
            return matchingNotificationsById && matchingNotificationsById.length ? true : false;
        };
        return UiMock;
    }());
    exports.UiMock = UiMock;
});
define("xrm-mock-generator/formcontext", ["require", "exports", "xrm-mock/index", "xrm-mock-generator/ui"], function (require, exports, XrmMock, ui_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FormContext = /** @class */ (function () {
        function FormContext() {
        }
        FormContext.createFormContext = function (entity, ui, process) {
            return new XrmMock.FormContextMock(new XrmMock.DataMock(new XrmMock.EntityMock(entity), process), ui || ui_1.default.createUi());
        };
        return FormContext;
    }());
    exports.default = FormContext;
});
define("xrm-mock-generator/eventcontext", ["require", "exports", "xrm-mock/index", "xrm-mock-generator/context", "xrm-mock-generator/formcontext"], function (require, exports, XrmMock, context_1, formcontext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EventContext = /** @class */ (function () {
        function EventContext() {
        }
        EventContext.createEventContext = function (entity, context, formContext, ui, process) {
            var eventContext = new XrmMock.EventContextMock({
                context: context || context_1.default.createContext(),
                formContext: formContext || formcontext_1.default.createFormContext(entity, ui, process),
            });
            return eventContext;
        };
        EventContext.Context = new context_1.default();
        EventContext.FormContext = new formcontext_1.default();
        return EventContext;
    }());
    exports.default = EventContext;
});
define("xrm-mock/mobile/mobile.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MobileMock = void 0;
    var MobileMock = /** @class */ (function () {
        function MobileMock(offline) {
            this.offline = offline;
        }
        return MobileMock;
    }());
    exports.MobileMock = MobileMock;
});
define("xrm-mock/mobileoffline/mobileoffline.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MobileOfflineMock = void 0;
    var MobileOfflineMock = /** @class */ (function () {
        function MobileOfflineMock() {
        }
        MobileOfflineMock.prototype.isOfflineEnabled = function (entityType) {
            throw new Error(("not implemented"));
        };
        MobileOfflineMock.prototype.createRecord = function (entityType, data) {
            throw new Error(("not implemented"));
        };
        MobileOfflineMock.prototype.retrieveRecord = function (entityType, id, options) {
            throw new Error(("not implemented"));
        };
        MobileOfflineMock.prototype.retrieveMultipleRecords = function (entityType, options, maxPageSize) {
            throw new Error(("not implemented"));
        };
        MobileOfflineMock.prototype.updateRecord = function (entityType, id, data) {
            throw new Error(("not implemented"));
        };
        MobileOfflineMock.prototype.deleteRecord = function (entityType, id) {
            throw new Error(("not implemented"));
        };
        return MobileOfflineMock;
    }());
    exports.MobileOfflineMock = MobileOfflineMock;
});
define("xrm-mock-generator/mobile", ["require", "exports", "xrm-mock/mobile/mobile.mock", "xrm-mock/mobileoffline/mobileoffline.mock"], function (require, exports, mobile_mock_1, mobileoffline_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Mobile = /** @class */ (function () {
        function Mobile() {
        }
        Mobile.createMobile = function () {
            var mobile = new mobile_mock_1.MobileMock(new mobileoffline_mock_1.MobileOfflineMock());
            return mobile;
        };
        return Mobile;
    }());
    exports.default = Mobile;
});
define("xrm-mock-generator/navigation", ["require", "exports", "xrm-mock/index"], function (require, exports, XrmMock) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Navigation = /** @class */ (function () {
        function Navigation() {
        }
        Navigation.createNavigation = function (client) {
            var navigation = new XrmMock.NavigationStaticMock();
            return navigation;
        };
        return Navigation;
    }());
    exports.default = Navigation;
});
define("xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UiCanGetVisibleElementMock = void 0;
    var UiCanGetVisibleElementMock = /** @class */ (function () {
        function UiCanGetVisibleElementMock(isVisible) {
            this.isVisible = isVisible;
        }
        UiCanGetVisibleElementMock.prototype.getVisible = function () {
            return this.isVisible;
        };
        return UiCanGetVisibleElementMock;
    }());
    exports.UiCanGetVisibleElementMock = UiCanGetVisibleElementMock;
});
define("xrm-mock/controls/uilabelelement/uilabelelement.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UiLabelElementMock = void 0;
    var UiLabelElementMock = /** @class */ (function () {
        function UiLabelElementMock(label) {
            this.label = label;
        }
        UiLabelElementMock.prototype.getLabel = function () {
            return this.label;
        };
        UiLabelElementMock.prototype.setLabel = function (label) {
            this.label = label;
        };
        return UiLabelElementMock;
    }());
    exports.UiLabelElementMock = UiLabelElementMock;
});
define("xrm-mock/controls/uistandardelement/uistandardelement.mock", ["require", "exports", "xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", "xrm-mock/controls/uilabelelement/uilabelelement.mock"], function (require, exports, uicangetvisibleelement_mock_1, uilabelelement_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UiStandardElementMock = void 0;
    var UiStandardElementMock = /** @class */ (function () {
        function UiStandardElementMock(uiLabelElement, uiCanGetVisibleElement) {
            this.uiLabelElement = uiLabelElement;
            this.uiCanGetVisibleElement = uiCanGetVisibleElement;
        }
        UiStandardElementMock.create = function (label, visible) {
            if (visible === void 0) { visible = true; }
            return new UiStandardElementMock(new uilabelelement_mock_1.UiLabelElementMock(label), new uicangetvisibleelement_mock_1.UiCanGetVisibleElementMock(visible));
        };
        UiStandardElementMock.prototype.setVisible = function (visible) {
            this.uiCanGetVisibleElement.getVisible = function () { return visible; };
        };
        UiStandardElementMock.prototype.getVisible = function () {
            return this.uiCanGetVisibleElement.getVisible();
        };
        UiStandardElementMock.prototype.getLabel = function () {
            return this.uiLabelElement.getLabel();
        };
        UiStandardElementMock.prototype.setLabel = function (label) {
            this.uiLabelElement.setLabel(label);
        };
        return UiStandardElementMock;
    }());
    exports.UiStandardElementMock = UiStandardElementMock;
});
define("xrm-mock-generator/helpers/control.helper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ControlHelpers = /** @class */ (function () {
        function ControlHelpers() {
        }
        ControlHelpers.setControlsParent = function (controls, parent) {
            controls.forEach(function (control) {
                control.parent = parent;
            });
        };
        return ControlHelpers;
    }());
    exports.default = ControlHelpers;
});
define("xrm-mock-generator/section", ["require", "exports", "xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", "xrm-mock/controls/uilabelelement/uilabelelement.mock", "xrm-mock/controls/uistandardelement/uistandardelement.mock", "xrm-mock/index", "xrm-mock-generator/helpers/control.helper"], function (require, exports, uicangetvisibleelement_mock_2, uilabelelement_mock_2, uistandardelement_mock_1, XrmMock, control_helper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Section = /** @class */ (function () {
        function Section() {
        }
        /**
         * Creates a section mock added to the XRM parent tab collection.
         * The section will be added to the parent tab given.
         * The section will be set as parent in the given controls.
         * Author: Yagasoft
         *
         * @param {string} [name] Logical name of the section.
         * @param {string} [label] Form label of the section.
         * @param {boolean} [isVisible] Is the section visible by default?
         * @param {Xrm.Controls.Tab} [parent] Parent tab.
         * @param {Xrm.Collection.ItemCollection<Xrm.Controls.Control>} [controls] List of controls in the section. Created by using the Mock Generator.
         * @returns {XrmMock.SectionMock} Section mock.
         * @memberof Section
         */
        Section.prototype.createSection = function (name, label, isVisible, parent, controls) {
            var section = new XrmMock.SectionMock(name, parent, new uistandardelement_mock_1.UiStandardElementMock(new uilabelelement_mock_2.UiLabelElementMock(label), new uicangetvisibleelement_mock_2.UiCanGetVisibleElementMock(isVisible)), controls);
            if (controls) {
                control_helper_1.default.setControlsParent(controls, section);
            }
            return section;
        };
        return Section;
    }());
    exports.default = Section;
});
define("xrm-mock/controls/section/section.mock", ["require", "exports", "xrm-mock/collection/itemcollection/itemcollection.mock", "xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", "xrm-mock/controls/uilabelelement/uilabelelement.mock", "xrm-mock/controls/uistandardelement/uistandardelement.mock"], function (require, exports, itemcollection_mock_2, uicangetvisibleelement_mock_3, uilabelelement_mock_3, uistandardelement_mock_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SectionMock = void 0;
    var SectionMock = /** @class */ (function () {
        function SectionMock(name, parent, uiStandardElement, controls) {
            this.name = name;
            this.parent = parent;
            if (this.parent && this.parent.sections.get(name) == null) {
                var sections = this.parent.sections;
                if (sections) {
                    sections.push(this);
                }
            }
            this.uiStandardElement = uiStandardElement
                || new uistandardelement_mock_2.UiStandardElementMock(new uilabelelement_mock_3.UiLabelElementMock(name), new uicangetvisibleelement_mock_3.UiCanGetVisibleElementMock(true));
            this.controls = controls || new itemcollection_mock_2.ItemCollectionMock();
        }
        SectionMock.prototype.getName = function () {
            return this.name;
        };
        SectionMock.prototype.getParent = function () {
            return this.parent;
        };
        SectionMock.prototype.setVisible = function (visible) {
            this.uiStandardElement.setVisible(visible);
        };
        SectionMock.prototype.getVisible = function () {
            return this.uiStandardElement.getVisible();
        };
        SectionMock.prototype.getLabel = function () {
            return this.uiStandardElement.getLabel();
        };
        SectionMock.prototype.setLabel = function (label) {
            this.uiStandardElement.setLabel(label);
        };
        return SectionMock;
    }());
    exports.SectionMock = SectionMock;
});
define("xrm-mock/controls/uifocusable/uifocusable.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UiFocusableMock = void 0;
    var UiFocusableMock = /** @class */ (function () {
        function UiFocusableMock(hasFocus) {
            if (hasFocus === void 0) { hasFocus = false; }
            this.hasFocus = hasFocus;
        }
        UiFocusableMock.prototype.setFocus = function () {
            this.hasFocus = true;
        };
        return UiFocusableMock;
    }());
    exports.UiFocusableMock = UiFocusableMock;
});
define("xrm-mock/controls/tab/tab.mock", ["require", "exports", "xrm-mock-generator/helpers/array.helper", "xrm-mock/collection/itemcollection/itemcollection.mock", "xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", "xrm-mock/controls/uifocusable/uifocusable.mock", "xrm-mock/controls/uilabelelement/uilabelelement.mock", "xrm-mock/controls/uistandardelement/uistandardelement.mock"], function (require, exports, array_helper_1, itemcollection_mock_3, uicangetvisibleelement_mock_4, uifocusable_mock_1, uilabelelement_mock_4, uistandardelement_mock_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TabMock = void 0;
    var TabMock = /** @class */ (function () {
        function TabMock(components) {
            var _this = this;
            this.uiStandardElement = components.uiStandardElement
                || new uistandardelement_mock_3.UiStandardElementMock(new uilabelelement_mock_4.UiLabelElementMock(components.name), new uicangetvisibleelement_mock_4.UiCanGetVisibleElementMock(true));
            this.uiFocusableElement = components.uiFocusableElement || new uifocusable_mock_1.UiFocusableMock(false);
            this.name = components.name;
            this.parent = components.parent;
            this.displayState = components.displayState || "expanded";
            this.tabStateChangeHandlers = components.tabStateChangeHandlers || [];
            this.sections = components.sections || new itemcollection_mock_3.ItemCollectionMock([]);
            this.sections.forEach(function (section, index) {
                var sectionMock = section;
                if (sectionMock) {
                    sectionMock.parent = _this;
                }
            });
        }
        TabMock.prototype.getDisplayState = function () {
            return this.displayState;
        };
        TabMock.prototype.getName = function () {
            return this.name;
        };
        TabMock.prototype.getParent = function () {
            return this.parent;
        };
        TabMock.prototype.setDisplayState = function (displayState) {
            this.displayState = displayState;
        };
        TabMock.prototype.setVisible = function (visible) {
            return this.uiStandardElement.setVisible(visible);
        };
        TabMock.prototype.getVisible = function () {
            return this.uiStandardElement.getVisible();
        };
        TabMock.prototype.getLabel = function () {
            return this.uiStandardElement.getLabel();
        };
        TabMock.prototype.setLabel = function (label) {
            return this.uiStandardElement.setLabel(label);
        };
        TabMock.prototype.setFocus = function () {
            return this.uiFocusableElement.setFocus();
        };
        TabMock.prototype.addTabStateChange = function (handler) {
            this.tabStateChangeHandlers.push(handler);
        };
        TabMock.prototype.removeTabStateChange = function (handler) {
            var index = array_helper_1.findIndex(this.tabStateChangeHandlers, handler);
            this.tabStateChangeHandlers.splice(index, 1);
        };
        return TabMock;
    }());
    exports.TabMock = TabMock;
});
define("xrm-mock-generator/tab", ["require", "exports", "xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", "xrm-mock/controls/uilabelelement/uilabelelement.mock", "xrm-mock/controls/uistandardelement/uistandardelement.mock", "xrm-mock/index", "xrm-mock-generator/helpers/control.helper"], function (require, exports, uicangetvisibleelement_mock_5, uilabelelement_mock_5, uistandardelement_mock_4, XrmMock, control_helper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Tab = /** @class */ (function () {
        function Tab() {
        }
        /**
         * Creates a tab mock added to the XRM tabs collection.
         * The tab will be set as parent in the given sections.
         * Author: Yagasoft
         *
         * @param {string} [name] Logical name of the tab.
         * @param {string} [label] Form label of the tab.
         * @param {boolean} [isVisible] Is the tab visible by default?
         * @param {Xrm.DisplayState} [displayState] Is the tab collapsed or expanded?
         * @param {Xrm.ui} [parent] Parent UI.
         * @param {Xrm.Collection.ItemCollection<Xrm.Controls.Section>} [sections] List of sections in the tab. Created by using the Mock Generator.
         * @returns {XrmMock.TabMock} Tab mock.
         * @memberof Tab
         */
        Tab.prototype.createTab = function (name, label, isVisible, displayState, parent, sections) {
            var tabs = Xrm.Page.ui.tabs;
            if (!tabs) {
                throw new Error("Couldn't find the tabs collection in the XRM object.");
            }
            var tabComponents = {
                displayState: displayState,
                name: name,
                parent: parent || Xrm.Page.ui,
                sections: sections,
                uiStandardElement: new uistandardelement_mock_4.UiStandardElementMock(new uilabelelement_mock_5.UiLabelElementMock(label), new uicangetvisibleelement_mock_5.UiCanGetVisibleElementMock(isVisible)),
            };
            var tab = new XrmMock.TabMock(tabComponents);
            if (sections) {
                control_helper_2.default.setControlsParent(sections, tab);
            }
            tabs.push(tab);
            return tab;
        };
        return Tab;
    }());
    exports.default = Tab;
});
define("xrm-mock/utility/utility.mock", ["require", "exports", "xrm-mock-generator/xrm-mock-generator"], function (require, exports, xrm_mock_generator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UtilityMock = void 0;
    var UtilityMock = /** @class */ (function () {
        function UtilityMock() {
        }
        UtilityMock.prototype.alertDialog = function (message, onCloseCallback) {
            alert(message);
            onCloseCallback();
        };
        UtilityMock.prototype.confirmDialog = function (message, yesCloseCallback, noCloseCallback) {
            if (confirm(message)) {
                yesCloseCallback();
            }
            else {
                noCloseCallback();
            }
        };
        UtilityMock.prototype.isActivityType = function (entityType) {
            throw new Error(("is activity type not implemented"));
        };
        UtilityMock.prototype.openQuickCreate = function (entityLogicalName, createFromEntity, parameters) {
            throw new Error(("open quick create not implemented"));
        };
        UtilityMock.prototype.openEntityForm = function (name, id, parameters, windowOptions) {
            throw new Error(("open entity form not implemented"));
        };
        UtilityMock.prototype.openWebResource = function (webResourceName, webResourceData, width, height) {
            throw new Error(("open web resource not implemented"));
        };
        UtilityMock.prototype.closeProgressIndicator = function () {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.getAllowedStatusTransitions = function (entityName, stateCode) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.getEntityMetadata = function (entityName, attributes) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.getGlobalContext = function () {
            return xrm_mock_generator_1.XrmMockGenerator.context;
        };
        UtilityMock.prototype.getResourceString = function (webResourceName, key) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.invokeProcessAction = function (name, parameters) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.lookupObjects = function (lookupOptions) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.refreshParentGrid = function (lookupOptions) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.showProgressIndicator = function (message) {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.getLearningPathAttributeName = function () {
            throw new Error("Method not implemented.");
        };
        UtilityMock.prototype.getPageContext = function () {
            throw new Error("Method not implemented.");
        };
        return UtilityMock;
    }());
    exports.UtilityMock = UtilityMock;
});
define("xrm-mock-generator/utility", ["require", "exports", "xrm-mock/utility/utility.mock"], function (require, exports, utility_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utility = /** @class */ (function () {
        function Utility() {
        }
        Utility.createUtility = function () {
            var utility = new utility_mock_1.UtilityMock();
            return utility;
        };
        return Utility;
    }());
    exports.default = Utility;
});
define("xrm-mock-generator/webapi", ["require", "exports", "xrm-mock/index"], function (require, exports, XrmMock) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WebApi = /** @class */ (function () {
        function WebApi() {
        }
        WebApi.createApi = function (clientContext) {
            var offlineApi = this.createOfflineApi();
            var onlineApi = this.createOnlineApi(offlineApi);
            var api = new XrmMock.WebApiMock(clientContext, onlineApi, offlineApi);
            return api;
        };
        WebApi.createOfflineApi = function () {
            var offlineApi = new XrmMock.WebApiOfflineMock();
            return offlineApi;
        };
        WebApi.createOnlineApi = function (offlineApi) {
            var onlineApi = new XrmMock.WebApiOnlineMock(offlineApi);
            return onlineApi;
        };
        return WebApi;
    }());
    exports.default = WebApi;
});
define("xrm-mock-generator/xrm-mock-generator", ["require", "exports", "xrm-mock/index", "xrm-mock-generator/app", "xrm-mock-generator/attribute", "xrm-mock-generator/context", "xrm-mock-generator/control", "xrm-mock-generator/device", "xrm-mock-generator/eventcontext", "xrm-mock-generator/form", "xrm-mock-generator/formcontext", "xrm-mock-generator/mobile", "xrm-mock-generator/navigation", "xrm-mock-generator/section", "xrm-mock-generator/tab", "xrm-mock-generator/utility", "xrm-mock-generator/webapi"], function (require, exports, XrmMock, app_1, attribute_1, context_2, control_2, device_1, eventcontext_1, form_2, formcontext_2, mobile_1, navigation_1, section_1, tab_1, utility_1, webapi_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrmMockGenerator = void 0;
    var XrmMockGenerator = /** @class */ (function () {
        function XrmMockGenerator() {
        }
        XrmMockGenerator.initialise = function (components) {
            components = components || {};
            this.context = components.context || context_2.default.createContext();
            this.formContext = formcontext_2.default.createFormContext(components.entity, components.ui, components.process);
            this.eventContext = eventcontext_1.default.createEventContext(components.entity, components.context, this.formContext, components.ui, components.process);
            var xrm = new XrmMock.XrmStaticMock({
                app: app_1.default.createApp(),
                device: device_1.default.createDevice(),
                mobile: mobile_1.default.createMobile(),
                navigation: navigation_1.default.createNavigation(),
                page: new XrmMock.PageMock(this.context, this.formContext),
                utility: utility_1.default.createUtility(),
                webApi: webapi_1.default.createApi(this.context.client),
            });
            if (typeof global === "undefined") {
                window.Xrm = xrm;
            }
            else {
                global.Xrm = xrm;
            }
            return xrm;
        };
        XrmMockGenerator.getEventContext = function () {
            return this.eventContext;
        };
        XrmMockGenerator.getFormContext = function () {
            return this.formContext;
        };
        XrmMockGenerator.EventContext = new eventcontext_1.default();
        XrmMockGenerator.FormContext = new formcontext_2.default();
        XrmMockGenerator.Attribute = new attribute_1.default();
        XrmMockGenerator.Context = new context_2.default();
        XrmMockGenerator.Control = new control_2.default();
        XrmMockGenerator.Device = new device_1.default();
        XrmMockGenerator.Mobile = new mobile_1.default();
        XrmMockGenerator.Tab = new tab_1.default();
        XrmMockGenerator.Section = new section_1.default();
        XrmMockGenerator.Form = new form_2.default();
        XrmMockGenerator.Navigation = new navigation_1.default();
        XrmMockGenerator.WebApi = new webapi_1.default();
        XrmMockGenerator.Utility = new utility_1.default();
        XrmMockGenerator.App = new app_1.default();
        return XrmMockGenerator;
    }());
    exports.XrmMockGenerator = XrmMockGenerator;
});
define("xrm-mock/controls/control/control.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ControlMock = void 0;
    var ControlMock = /** @class */ (function () {
        function ControlMock(components) {
            this.controlType = components.controlType || "standard";
            this.label = components.label;
            this.visible = components.visible;
            this.name = components.name;
            this.parent = components.parent;
        }
        ControlMock.prototype.getControlType = function () {
            return this.controlType;
        };
        ControlMock.prototype.getName = function () {
            return this.name;
        };
        ControlMock.prototype.getParent = function () {
            return this.parent;
        };
        ControlMock.prototype.getLabel = function () {
            return this.label;
        };
        ControlMock.prototype.setLabel = function (label) {
            this.label = label;
        };
        ControlMock.prototype.getVisible = function () {
            return this.visible;
        };
        return ControlMock;
    }());
    exports.ControlMock = ControlMock;
});
define("xrm-mock/events/eventcontext/eventcontext.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventContextMock = void 0;
    var EventContextMock = /** @class */ (function () {
        function EventContextMock(components) {
            this.context = components.context;
            this.depth = components.depth === undefined || components.depth === null ? 1 : components.depth;
            this.eventArgs = components.eventArgs;
            this.eventSource = components.eventSource;
            this.formContext = components.formContext;
            this.sharedVariables = components.sharedVariables || {};
        }
        EventContextMock.prototype.getContext = function () {
            return this.context;
        };
        EventContextMock.prototype.getDepth = function () {
            return this.depth;
        };
        EventContextMock.prototype.getEventArgs = function () {
            if (this.eventArgs) {
                return this.eventArgs;
            }
            throw new Error("no event args given");
        };
        EventContextMock.prototype.getEventSource = function () {
            if (this.eventSource) {
                return this.eventSource;
            }
            throw new Error("no event source given");
        };
        EventContextMock.prototype.getFormContext = function () {
            return this.formContext;
        };
        EventContextMock.prototype.getSharedVariable = function (key) {
            return this.sharedVariables[key];
        };
        EventContextMock.prototype.setSharedVariable = function (key, value) {
            this.sharedVariables[key] = value;
        };
        return EventContextMock;
    }());
    exports.EventContextMock = EventContextMock;
});
define("xrm-mock/attributes/attribute/attribute.mock", ["require", "exports", "xrm-mock-generator/helpers/array.helper", "xrm-mock-generator/xrm-mock-generator", "xrm-mock/collection/itemcollection/itemcollection.mock", "xrm-mock/events/eventcontext/eventcontext.mock"], function (require, exports, array_helper_2, xrm_mock_generator_2, itemcollection_mock_4, eventcontext_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttributeMock = void 0;
    var AttributeMock = /** @class */ (function () {
        function AttributeMock(components) {
            this.attributeType = components.attributeType || "string";
            this.format = components.format;
            this.name = components.name;
            this.value = components.value;
            this.isDirty = components.isDirty === true ? true : false;
            this.requiredLevel = components.requiredLevel || "none";
            this.submitMode = components.submitMode || "dirty";
            this.controls = components.controls || new itemcollection_mock_4.ItemCollectionMock();
            this.eventHandlers = components.eventHandlers || [];
        }
        AttributeMock.prototype.addOnChange = function (handler) {
            this.eventHandlers.push(handler);
        };
        AttributeMock.prototype.fireOnChange = function () {
            if (this.eventHandlers.length) {
                var globalContext = xrm_mock_generator_2.XrmMockGenerator.getEventContext();
                var context = new eventcontext_mock_1.EventContextMock(__assign(__assign({}, globalContext), { depth: globalContext.depth ? globalContext.depth + 1 : 1, eventSource: this }));
                for (var _i = 0, _a = this.eventHandlers; _i < _a.length; _i++) {
                    var handler = _a[_i];
                    handler.call(this, context);
                }
            }
        };
        AttributeMock.prototype.getAttributeType = function () {
            return this.attributeType;
        };
        AttributeMock.prototype.getFormat = function () {
            return this.format;
        };
        AttributeMock.prototype.getIsDirty = function () {
            return this.isDirty;
        };
        AttributeMock.prototype.getName = function () {
            return this.name;
        };
        AttributeMock.prototype.getParent = function () {
            throw new Error("getParent not implemented");
        };
        AttributeMock.prototype.getRequiredLevel = function () {
            return this.requiredLevel;
        };
        AttributeMock.prototype.getSubmitMode = function () {
            return this.submitMode;
        };
        AttributeMock.prototype.getUserPrivilege = function () {
            throw new Error("getUserPrivilege not implemented");
        };
        AttributeMock.prototype.removeOnChange = function (handler) {
            var index = array_helper_2.findIndex(this.eventHandlers, handler);
            this.eventHandlers.splice(index, 1);
        };
        AttributeMock.prototype.setRequiredLevel = function (requirementLevel) {
            this.requiredLevel = requirementLevel;
        };
        AttributeMock.prototype.setSubmitMode = function (submitMode) {
            this.submitMode = submitMode;
        };
        AttributeMock.prototype.getValue = function () {
            return this.value;
        };
        AttributeMock.prototype.setValue = function (value) {
            this.value = value;
            this.isDirty = true;
        };
        AttributeMock.prototype.isValid = function () {
            throw new Error("isValid not implemented");
        };
        AttributeMock.prototype.setIsValid = function (valid, message) {
            throw new Error("setIsValid not implemented");
        };
        return AttributeMock;
    }());
    exports.AttributeMock = AttributeMock;
});
define("xrm-mock/controls/autocompletecommand/autocompletecommand.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoCompleteCommandMock = void 0;
    var AutoCompleteCommandMock = /** @class */ (function () {
        function AutoCompleteCommandMock(id, label, icon, action) {
            this.id = id;
            this.label = label;
            this.icon = icon;
            this.action = action;
        }
        AutoCompleteCommandMock.prototype.action = function () {
            throw new Error("Action not implemented.");
        };
        return AutoCompleteCommandMock;
    }());
    exports.AutoCompleteCommandMock = AutoCompleteCommandMock;
});
define("xrm-mock/controls/autocompleteresult/autocompleteresult.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoCompleteResultMock = void 0;
    var AutoCompleteResultMock = /** @class */ (function () {
        function AutoCompleteResultMock(id, fields, icon) {
            this.id = id;
            this.fields = fields;
            this.icon = icon;
        }
        return AutoCompleteResultMock;
    }());
    exports.AutoCompleteResultMock = AutoCompleteResultMock;
});
define("xrm-mock/controls/autocompleteresultset/autocompleteresultset.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoCompleteResultSetMock = void 0;
    var AutoCompleteResultSetMock = /** @class */ (function () {
        function AutoCompleteResultSetMock(results, commands) {
            this.results = results;
            this.commands = commands;
        }
        return AutoCompleteResultSetMock;
    }());
    exports.AutoCompleteResultSetMock = AutoCompleteResultSetMock;
});
define("xrm-mock/controls/standardcontrol/standardcontrol.mock", ["require", "exports", "xrm-mock/controls/control/control.mock", "xrm-mock/controls/uifocusable/uifocusable.mock", "xrm-mock/controls/uistandardelement/uistandardelement.mock"], function (require, exports, control_mock_1, uifocusable_mock_2, uistandardelement_mock_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardControlMock = void 0;
    var StandardControlMock = /** @class */ (function (_super) {
        __extends(StandardControlMock, _super);
        function StandardControlMock(components) {
            var _this = _super.call(this, components) || this;
            _this.disabled = components.disabled || false;
            _this.uiStandardElement = uistandardelement_mock_5.UiStandardElementMock.create(components.label || _this.name, components.visible);
            _this.uiFocusable = new uifocusable_mock_2.UiFocusableMock(components.hasFocus);
            _this.attribute = components.attribute;
            if (_this.attribute && _this.attribute.controls) {
                _this.attribute.controls.push(_this);
            }
            return _this;
        }
        StandardControlMock.prototype.addNotification = function (notification) {
            throw new Error("Method not implemented.");
        };
        StandardControlMock.prototype.clearNotification = function (uniqueId) {
            throw new Error(("clear notification not implemented"));
        };
        StandardControlMock.prototype.getDisabled = function () {
            return this.disabled;
        };
        StandardControlMock.prototype.setDisabled = function (disabled) {
            this.disabled = disabled;
        };
        StandardControlMock.prototype.setNotification = function (message, uniqueId) {
            throw new Error(("set notification not implemented"));
        };
        StandardControlMock.prototype.getAttribute = function () {
            if (["subgrid", "iframe", "webresource"].indexOf(this.getControlType()) === -1) {
                return this.attribute;
            }
            else {
                throw new Error("control is not bound to an attribute because it is of type " + this.getControlType());
            }
        };
        StandardControlMock.prototype.getLabel = function () {
            return this.uiStandardElement.getLabel();
        };
        StandardControlMock.prototype.setLabel = function (label) {
            this.uiStandardElement.setLabel(label);
        };
        StandardControlMock.prototype.getVisible = function () {
            return this.uiStandardElement.getVisible();
        };
        StandardControlMock.prototype.setVisible = function (visible) {
            this.uiStandardElement.setVisible(visible);
        };
        StandardControlMock.prototype.setFocus = function () {
            this.uiFocusable.setFocus();
        };
        return StandardControlMock;
    }(control_mock_1.ControlMock));
    exports.StandardControlMock = StandardControlMock;
});
define("xrm-mock/controls/uikeypressable/uikeypressable.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UiKeyPressableMock = void 0;
    var UiKeyPressableMock = /** @class */ (function () {
        function UiKeyPressableMock(keyPressHandlers) {
            this.keyPressHandlers = keyPressHandlers;
            this.keyPressHandlers = keyPressHandlers || [];
        }
        UiKeyPressableMock.prototype.addOnKeyPress = function (handler) {
            this.keyPressHandlers.push(handler);
        };
        UiKeyPressableMock.prototype.fireOnKeyPress = function (eventContext) {
            this.keyPressHandlers.forEach(function (k) {
                k(eventContext);
            });
        };
        UiKeyPressableMock.prototype.removeOnKeyPress = function (handler) {
            var index = this.keyPressHandlers.indexOf(handler);
            if (index > -1) {
                this.keyPressHandlers.splice(index);
            }
        };
        return UiKeyPressableMock;
    }());
    exports.UiKeyPressableMock = UiKeyPressableMock;
});
define("xrm-mock/controls/autolookupcontrol/autolookupcontrol.mock", ["require", "exports", "xrm-mock/controls/standardcontrol/standardcontrol.mock", "xrm-mock/controls/uikeypressable/uikeypressable.mock"], function (require, exports, standardcontrol_mock_1, uikeypressable_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoLookupControlMock = void 0;
    var AutoLookupControlMock = /** @class */ (function (_super) {
        __extends(AutoLookupControlMock, _super);
        function AutoLookupControlMock(components) {
            var _this = _super.call(this, components) || this;
            _this.uncommittedText = components.uncommittedText;
            _this.uiKeyPressable = new uikeypressable_mock_1.UiKeyPressableMock(components.keyPressHandlers);
            return _this;
        }
        AutoLookupControlMock.prototype.getValue = function () {
            return this.uncommittedText;
        };
        AutoLookupControlMock.prototype.hideAutoComplete = function () {
            throw new Error(("hide autocomplete not implemented"));
        };
        AutoLookupControlMock.prototype.showAutoComplete = function (resultSet) {
            throw new Error(("show autocomplete not implemented"));
        };
        AutoLookupControlMock.prototype.addOnKeyPress = function (handler) {
            this.uiKeyPressable.addOnKeyPress(handler);
        };
        AutoLookupControlMock.prototype.fireOnKeyPress = function () {
            this.uiKeyPressable.fireOnKeyPress();
        };
        AutoLookupControlMock.prototype.removeOnKeyPress = function (handler) {
            this.uiKeyPressable.removeOnKeyPress(handler);
        };
        return AutoLookupControlMock;
    }(standardcontrol_mock_1.StandardControlMock));
    exports.AutoLookupControlMock = AutoLookupControlMock;
});
define("xrm-mock/controls/booleancontrol/booleancontrol.mock", ["require", "exports", "xrm-mock/controls/standardcontrol/standardcontrol.mock"], function (require, exports, standardcontrol_mock_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanControlMock = void 0;
    var BooleanControlMock = /** @class */ (function (_super) {
        __extends(BooleanControlMock, _super);
        function BooleanControlMock(components) {
            return _super.call(this, components) || this;
        }
        return BooleanControlMock;
    }(standardcontrol_mock_2.StandardControlMock));
    exports.BooleanControlMock = BooleanControlMock;
});
define("xrm-mock/attributes/enumattribute/enumattribute.mock", ["require", "exports", "xrm-mock/attributes/attribute/attribute.mock"], function (require, exports, attribute_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnumAttributeMock = void 0;
    var EnumAttributeMock = /** @class */ (function (_super) {
        __extends(EnumAttributeMock, _super);
        function EnumAttributeMock(components) {
            var _this = _super.call(this, components) || this;
            _this.initialValue = "initialValue" in components
                ? components.initialValue
                : components.value;
            return _this;
        }
        EnumAttributeMock.prototype.getInitialValue = function () {
            return this.initialValue;
        };
        return EnumAttributeMock;
    }(attribute_mock_1.AttributeMock));
    exports.EnumAttributeMock = EnumAttributeMock;
});
define("xrm-mock/attributes/booleanattribute/booleanattribute.mock", ["require", "exports", "xrm-mock/attributes/enumattribute/enumattribute.mock"], function (require, exports, enumattribute_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanAttributeMock = void 0;
    var BooleanAttributeMock = /** @class */ (function (_super) {
        __extends(BooleanAttributeMock, _super);
        function BooleanAttributeMock(components) {
            return _super.call(this, BooleanAttributeMock.defaultComponents(components)) || this;
        }
        BooleanAttributeMock.create = function (name, value) {
            if (value === void 0) { value = false; }
            return new BooleanAttributeMock({ name: name, value: value });
        };
        BooleanAttributeMock.defaultComponents = function (components) {
            components.attributeType = "boolean";
            return components;
        };
        return BooleanAttributeMock;
    }(enumattribute_mock_1.EnumAttributeMock));
    exports.BooleanAttributeMock = BooleanAttributeMock;
});
define("xrm-mock/calendar/calendar.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CalendarMock = void 0;
    var CalendarMock = /** @class */ (function () {
        function CalendarMock(components) {
            this.MinSupportedDateTime = components.MinSupportedDateTime;
            this.MaxSupportedDateTime = components.MaxSupportedDateTime;
            this.AlgorithmType = components.AlgorithmType;
            this.CalendarType = components.CalendarType;
            this.Eras = components.Eras;
            this.TwoDigitYearMax = components.TwoDigitYearMax;
            this.IsReadOnly = components.IsReadOnly;
        }
        return CalendarMock;
    }());
    exports.CalendarMock = CalendarMock;
});
define("xrm-mock/device/capturefileresponse/capturefileresponse.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CaptureFileResponseMock = void 0;
    var CaptureFileResponseMock = /** @class */ (function () {
        function CaptureFileResponseMock(fileContent, fileName, fileSize, mimeType) {
            this.fileContent = fileContent;
            this.fileName = fileName;
            this.fileSize = fileSize;
            this.mimeType = mimeType;
        }
        return CaptureFileResponseMock;
    }());
    exports.CaptureFileResponseMock = CaptureFileResponseMock;
});
define("xrm-mock/device/captureimageoptions/captureimageoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CaptureImageOptionsMock = void 0;
    var CaptureImageOptionsMock = /** @class */ (function () {
        function CaptureImageOptionsMock(components) {
            this.allowEdit = components.allowEdit;
            this.height = components.height;
            this.preferFrontCamera = components.preferFrontCamera;
            this.quality = components.quality;
            this.width = components.width;
        }
        return CaptureImageOptionsMock;
    }());
    exports.CaptureImageOptionsMock = CaptureImageOptionsMock;
});
define("xrm-mock/clientcontext/clientcontext.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientContextMock = void 0;
    var ClientContextMock = /** @class */ (function () {
        function ClientContextMock(client, clientState) {
            this.client = client;
            this.clientState = clientState;
        }
        ClientContextMock.prototype.getClient = function () {
            return this.client;
        };
        ClientContextMock.prototype.getClientState = function () {
            return this.clientState;
        };
        ClientContextMock.prototype.getFormFactor = function () {
            throw new Error("Method not implemented.");
        };
        ClientContextMock.prototype.isOffline = function () {
            throw new Error("Method not implemented.");
        };
        return ClientContextMock;
    }());
    exports.ClientContextMock = ClientContextMock;
});
define("xrm-mock/navigation/confirmresult/confirmresult.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfirmResultMock = void 0;
    var ConfirmResultMock = /** @class */ (function () {
        function ConfirmResultMock(confirmed) {
            this.confirmed = confirmed;
        }
        return ConfirmResultMock;
    }());
    exports.ConfirmResultMock = ConfirmResultMock;
});
define("xrm-mock/navigation/confirmstrings/confirmstrings.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfirmStringsMock = void 0;
    var ConfirmStringsMock = /** @class */ (function () {
        function ConfirmStringsMock(components) {
            this.cancelButtonLabel = components.cancelButtonLabel;
            this.confirmButtonLabel = components.confirmButtonLabel;
            this.subtitle = components.subtitle;
            this.title = components.title;
            this.text = components.text;
        }
        return ConfirmStringsMock;
    }());
    exports.ConfirmStringsMock = ConfirmStringsMock;
});
define("xrm-mock/globalcontext/context.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextMock = void 0;
    var ContextMock = /** @class */ (function () {
        function ContextMock(components) {
            this.userSettings = components.userSettings;
            this.client = components.clientContext;
            this.clientUrl = components.clientUrl;
            this.currentTheme = components.currentTheme;
            this.isAutoSaveEnabled = components.isAutoSaveEnabled;
            this.orgLcid = components.orgLcid;
            this.orgUniqueName = components.orgUniqueName;
            this.timeZoneOffset = components.timeZoneOffset;
            this.userId = components.userId || components.userSettings.userId;
            this.userLcid = components.userLcid || components.userSettings.languageId;
            this.userName = components.userName || components.userSettings.userName;
            this.userRoles = components.userRoles || components.userSettings.securityRoles;
            this.version = components.version;
            this.organizationSettings = buildDefaultOrganizationSettings();
        }
        ContextMock.prototype.getClientUrl = function () {
            return this.clientUrl;
        };
        ContextMock.prototype.getCurrentTheme = function () {
            return this.currentTheme;
        };
        ContextMock.prototype.getIsAutoSaveEnabled = function () {
            return this.isAutoSaveEnabled;
        };
        ContextMock.prototype.getOrgLcid = function () {
            return this.orgLcid;
        };
        ContextMock.prototype.getOrgUniqueName = function () {
            return this.orgUniqueName;
        };
        ContextMock.prototype.getQueryStringParameters = function () {
            throw new Error(("get query string parameters not implemented"));
        };
        ContextMock.prototype.getTimeZoneOffsetMinutes = function () {
            return this.timeZoneOffset;
        };
        ContextMock.prototype.getUserSettings = function () {
            return this.userSettings;
        };
        ContextMock.prototype.getUserId = function () {
            return this.userId;
        };
        ContextMock.prototype.getUserLcid = function () {
            return this.userLcid;
        };
        ContextMock.prototype.getUserName = function () {
            return this.userName;
        };
        ContextMock.prototype.getUserRoles = function () {
            return this.userRoles;
        };
        ContextMock.prototype.getVersion = function () {
            return this.version;
        };
        ContextMock.prototype.prependOrgName = function (sPath) {
            return sPath + this.orgUniqueName;
        };
        ContextMock.prototype.getAdvancedConfigSetting = function (setting) {
            throw new Error("Method not implemented.");
        };
        ContextMock.prototype.getCurrentAppName = function () {
            throw new Error("Method not implemented.");
        };
        ContextMock.prototype.getCurrentAppProperties = function () {
            throw new Error("Method not implemented.");
        };
        ContextMock.prototype.getCurrentAppUrl = function () {
            throw new Error("Method not implemented.");
        };
        ContextMock.prototype.isOnPremise = function () {
            throw new Error("Method not implemented.");
        };
        ContextMock.prototype.isOnPremises = function () {
            throw new Error("Method not implemented.");
        };
        ContextMock.prototype.getWebResourceUrl = function (webResourceName) {
            throw new Error("Method not implemented.");
        };
        return ContextMock;
    }());
    exports.ContextMock = ContextMock;
    function buildDefaultOrganizationSettings() {
        return {
            baseCurrencyId: "00000000-0000-0000-0000-0000000000000",
            baseCurrency: {
                id: "00000000-0000-0000-0000-0000000000000",
                entityType: "transactioncurrency"
            },
            defaultCountryCode: null,
            isAutoSaveEnabled: true,
            languageId: 1033,
            organizationId: "00000000-0000-0000-0000-0000000000000",
            uniqueName: "test-uniqueName",
            useSkypeProtocol: true,
            organizationGeo: ""
        };
    }
});
define("xrm-mock/controls/controlnotificationaction/controlnotificationaction.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ControlNotificationActionMock = void 0;
    var ControlNotificationActionMock = /** @class */ (function () {
        function ControlNotificationActionMock(actions, message) {
            this.message = message;
            this.actions = actions;
        }
        return ControlNotificationActionMock;
    }());
    exports.ControlNotificationActionMock = ControlNotificationActionMock;
});
define("xrm-mock/data/data.mock", ["require", "exports", "xrm-mock/collection/itemcollection/itemcollection.mock"], function (require, exports, itemcollection_mock_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataMock = void 0;
    var DataMock = /** @class */ (function () {
        function DataMock(entity, process) {
            this.attributes = new itemcollection_mock_5.ItemCollectionMock();
            this.entity = entity;
            this.process = process;
            this.loadEventHandlers = [];
        }
        DataMock.prototype.refresh = function (save) {
            throw new Error(("refresh not implemented"));
        };
        DataMock.prototype.save = function (saveOptions) {
            throw new Error(("save not implemented"));
        };
        DataMock.prototype.isValid = function () {
            throw new Error(("isValid not implemented"));
        };
        DataMock.prototype.getIsDirty = function () {
            throw new Error(("getIsDirty not implemented"));
        };
        DataMock.prototype.addOnLoad = function (handler) {
            this.loadEventHandlers.push(handler);
        };
        DataMock.prototype.removeOnLoad = function (handler) {
            var index = this.loadEventHandlers.indexOf(handler);
            this.loadEventHandlers.splice(index);
        };
        return DataMock;
    }());
    exports.DataMock = DataMock;
});
define("xrm-mock/controls/datecontrol/datecontrol.mock", ["require", "exports", "xrm-mock/controls/standardcontrol/standardcontrol.mock"], function (require, exports, standardcontrol_mock_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateControlMock = void 0;
    var DateControlMock = /** @class */ (function (_super) {
        __extends(DateControlMock, _super);
        function DateControlMock(components) {
            var _this = _super.call(this, DateControlMock.defaultComponents(components)) || this;
            _this.showTime = components.showTime;
            return _this;
        }
        DateControlMock.defaultComponents = function (components) {
            if (!("showTime" in components)) {
                components.showTime = components.attribute
                    ? components.attribute.getFormat() === "datetime"
                    : false;
            }
            return components;
        };
        DateControlMock.prototype.getShowTime = function () {
            return this.showTime;
        };
        DateControlMock.prototype.setShowTime = function (showTime) {
            // TODO: Does the Attribute format need to get updated as well?
            this.showTime = showTime;
        };
        return DateControlMock;
    }(standardcontrol_mock_3.StandardControlMock));
    exports.DateControlMock = DateControlMock;
});
define("xrm-mock/attributes/dateattribute/dateattribute.mock", ["require", "exports", "xrm-mock/attributes/attribute/attribute.mock"], function (require, exports, attribute_mock_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateAttributeMock = void 0;
    var DateAttributeMock = /** @class */ (function (_super) {
        __extends(DateAttributeMock, _super);
        function DateAttributeMock(components) {
            return _super.call(this, DateAttributeMock.defaultComponents(components)) || this;
        }
        DateAttributeMock.create = function (name, value) {
            return new DateAttributeMock({ name: name, value: value });
        };
        DateAttributeMock.defaultComponents = function (components) {
            if (!components.format) {
                components.format = "date";
            }
            components.attributeType = "datetime";
            return components;
        };
        DateAttributeMock.prototype.getFormat = function () {
            return _super.prototype.getFormat.call(this);
        };
        return DateAttributeMock;
    }(attribute_mock_2.AttributeMock));
    exports.DateAttributeMock = DateAttributeMock;
});
define("xrm-mock/dateformattinginfo/dateformattinginfo.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateFormattingInfoMock = void 0;
    var DateFormattingInfoMock = /** @class */ (function () {
        function DateFormattingInfoMock(components) {
            this.AmDesignator = components.AmDesignator;
            this.AbbreviatedDayNames = components.AbbreviatedDayNames;
            this.AbbreviatedMonthGenitiveNames = components.AbbreviatedMonthGenitiveNames;
            this.AbbreviatedMonthNames = components.AbbreviatedMonthNames;
            this.CalendarWeekRule = components.CalendarWeekRule;
            this.Calendar = components.Calendar;
            this.DateSeparator = components.DateSeparator;
            this.DayNames = components.DayNames;
            this.FirstDayOfWeek = components.FirstDayOfWeek;
            this.FullDateTimePattern = components.FullDateTimePattern;
            this.LongDatePattern = components.LongDatePattern;
            this.LongTimePattern = components.LongTimePattern;
            this.MonthDayPattern = components.MonthDayPattern;
            this.MonthGenitiveNames = components.MonthGenitiveNames;
            this.MonthNames = components.MonthNames;
            this.PmDesignator = components.PmDesignator;
            this.ShortDatePattern = components.ShortDatePattern;
            this.ShortTimePattern = components.ShortTimePattern;
            this.ShortestDayNames = components.ShortestDayNames;
            this.SortableDateTimePattern = components.SortableDateTimePattern;
            this.TimeSeparator = components.TimeSeparator;
            this.UniversalSortableDateTimePattern = components.UniversalSortableDateTimePattern;
            this.YearMonthPattern = components.YearMonthPattern;
        }
        return DateFormattingInfoMock;
    }());
    exports.DateFormattingInfoMock = DateFormattingInfoMock;
});
define("xrm-mock/navigation/dialogsizeoptions/dialogsizeoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DialogSizeOptionsMock = void 0;
    var DialogSizeOptionsMock = /** @class */ (function () {
        function DialogSizeOptionsMock(height, width) {
            this.height = height;
            this.width = width;
        }
        return DialogSizeOptionsMock;
    }());
    exports.DialogSizeOptionsMock = DialogSizeOptionsMock;
});
define("xrm-mock/encoding/encoding.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EncodingMock = void 0;
    var EncodingMock = /** @class */ (function () {
        function EncodingMock() {
        }
        EncodingMock.prototype.xmlAttributeEncode = function (arg) {
            throw new Error("Not implemented");
        };
        EncodingMock.prototype.xmlEncode = function (arg) {
            throw new Error("Not implemented");
        };
        EncodingMock.prototype.htmlAttributeEncode = function (arg) {
            throw new Error("Not implemented");
        };
        EncodingMock.prototype.htmlDecode = function (arg) {
            throw new Error("Not implemented");
        };
        EncodingMock.prototype.htmlEncode = function (arg) {
            throw new Error("Not implemented");
        };
        return EncodingMock;
    }());
    exports.EncodingMock = EncodingMock;
});
define("xrm-mock/navigation/entityformoptions/entityformoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityFormOptionsMock = void 0;
    var EntityFormOptionsMock = /** @class */ (function () {
        function EntityFormOptionsMock(components) {
            this.cmdbar = components.cmdbar;
            this.createFromEntity = components.createFromEntity;
            this.entityId = components.entityId;
            this.entityName = components.entityName;
            this.formId = components.formId;
            this.height = components.height;
            this.isCrossEntityNavigate = components.isCrossEntityNavigate;
            this.isOfflineSyncError = components.isOfflineSyncError;
            this.navBar = components.navBar;
            this.openInNewWindow = components.openInNewWindow;
            this.windowPosition = components.windowPosition;
            this.processId = components.processId;
            this.processInstanceId = components.processInstanceId;
            this.relationship = components.relationship;
            this.selectedStageId = components.selectedStageId;
            this.useQuickCreateForm = components.useQuickCreateForm;
            this.width = components.width;
        }
        return EntityFormOptionsMock;
    }());
    exports.EntityFormOptionsMock = EntityFormOptionsMock;
});
define("xrm-mock/metadata/entitymetadata/entitymetadata.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityMetadataMock = void 0;
    var EntityMetadataMock = /** @class */ (function () {
        function EntityMetadataMock(components) {
            this.ActivityTypeMask = components.ActivityTypeMask;
            this.Attributes = components.Attributes;
            this.AutoRouteToOwnerQueue = components.AutoRouteToOwnerQueue;
            this.CanEnableSyncToExternalSearchIndex = components.CanEnableSyncToExternalSearchIndex;
            this.CanBeInManyToMany = components.CanBeInManyToMany;
            this.CanBePrimaryEntityInRelationship = components.CanBePrimaryEntityInRelationship;
            this.CanBeRelatedEntityInRelationship = components.CanBeRelatedEntityInRelationship;
            this.CanCreateAttributes = components.CanCreateAttributes;
            this.CanCreateCharts = components.CanCreateCharts;
            this.CanCreateForms = components.CanCreateForms;
            this.CanCreateViews = components.CanCreateViews;
            this.CanModifyAdditionalSettings = components.CanModifyAdditionalSettings;
            this.CanTriggerWorkflow = components.CanTriggerWorkflow;
            this.Description = components.Description;
            this.DisplayCollectionName = components.DisplayCollectionName;
            this.DisplayName = components.DisplayName;
            this.EntityColor = components.EntityColor;
            this.EntitySetName = components.EntitySetName;
            this.IconLargeName = components.IconLargeName;
            this.IconMediumName = components.IconMediumName;
            this.IconSmallName = components.IconSmallName;
            this.IsActivity = components.IsActivity;
            this.IsActivityParty = components.IsActivityParty;
            this.IsAuditEnabled = components.IsAuditEnabled;
            this.IsAvailableOffline = components.IsAvailableOffline;
            this.IsBPFEntity = components.IsBPFEntity;
            this.IsChildEntity = components.IsChildEntity;
            this.IsConnectionsEnabled = components.IsConnectionsEnabled;
            this.IsCustomEntity = components.IsCustomEntity;
            this.IsCustomizable = components.IsCustomizable;
            this.IsDocumentManagementEnabled = components.IsDocumentManagementEnabled;
            this.IsDuplicateDetectionEnabled = components.IsDuplicateDetectionEnabled;
            this.IsEnabledForCharts = components.IsEnabledForCharts;
            this.IsOneNotIntegrationEnabled = components.IsOneNotIntegrationEnabled;
            this.IsOptimisitcConcurrencyEnabled = components.IsOptimisitcConcurrencyEnabled;
            this.IsQuickCreateEnabled = components.IsQuickCreateEnabled;
            this.IsImportable = components.IsImportable;
            this.IsIntersect = components.IsIntersect;
            this.IsMailMergeEnabled = components.IsMailMergeEnabled;
            this.IsManaged = components.IsManaged;
            this.IsMappable = components.IsMappable;
            this.IsReadingPaneEnabled = components.IsReadingPaneEnabled;
            this.IsRenameable = components.IsRenameable;
            this.IsStateModelAware = components.IsStateModelAware;
            this.IsValidForAdvancedFind = components.IsValidForAdvancedFind;
            this.IsValidForQueue = components.IsValidForQueue;
            this.IsVisibleInMobileClient = components.IsVisibleInMobileClient;
            this.LogicalCollectionName = components.LogicalCollectionName;
            this.LogicalName = components.LogicalName;
            this.ObjectTypeCode = components.ObjectTypeCode;
            this.OwnershipTypeCode = components.OwnershipTypeCode;
            this.PrimaryIdAttribute = components.PrimaryIdAttribute;
            this.PrimaryNameAttribute = components.PrimaryNameAttribute;
            this.RecurrenceBaseEntityLogicalName = components.RecurrenceBaseEntityLogicalName;
            this.PrimaryImageAttribute = components.PrimaryImageAttribute;
        }
        return EntityMetadataMock;
    }());
    exports.EntityMetadataMock = EntityMetadataMock;
});
define("xrm-mock-generator/index", ["require", "exports", "xrm-mock-generator/xrm-mock-generator"], function (require, exports, xrm_mock_generator_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrmMockGenerator = void 0;
    Object.defineProperty(exports, "XrmMockGenerator", { enumerable: true, get: function () { return xrm_mock_generator_3.XrmMockGenerator; } });
});
define("xrm-mock/entity/entity.mock", ["require", "exports", "xrm-mock-generator/index", "xrm-mock/collection/itemcollection/itemcollection.mock"], function (require, exports, xrm_mock_generator_4, itemcollection_mock_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityMock = void 0;
    var EntityMock = /** @class */ (function () {
        function EntityMock(components) {
            components = components || {};
            this.id = components.id || "{deadbeef-dead-beef-dead-beefdeadbeaf}";
            this.entityName = components.entityName || "contact";
            this.primaryValue = components.primaryValue || "Default Contact";
            this.attributes = components.attributes || new itemcollection_mock_6.ItemCollectionMock();
            this.saveEventHandlers = [];
        }
        EntityMock.prototype.addOnPostSave = function (handler) {
            throw new Error("Method not implemented.");
        };
        EntityMock.prototype.addOnSave = function (handler) {
            this.saveEventHandlers.push(handler);
        };
        EntityMock.prototype.getEntityName = function () {
            return this.entityName;
        };
        EntityMock.prototype.getDataXml = function () {
            throw new Error(("getDataXml not implemented"));
        };
        EntityMock.prototype.getEntityReference = function () {
            return {
                entityType: this.entityName,
                id: this.id,
                name: this.primaryValue,
            };
        };
        EntityMock.prototype.getId = function () {
            return this.id;
        };
        EntityMock.prototype.getIsDirty = function () {
            var isDirty = false;
            if (this.attributes) {
                for (var i = 0; i < this.attributes.getLength(); i++) {
                    var attr = this.attributes.get(i);
                    if (attr.getIsDirty()) {
                        isDirty = true;
                        break;
                    }
                }
            }
            return isDirty;
        };
        EntityMock.prototype.getPrimaryAttributeValue = function () {
            return this.primaryValue;
        };
        EntityMock.prototype.isValid = function () {
            throw new Error("isValid not implemented.");
        };
        EntityMock.prototype.removeOnSave = function (handler) {
            var index = this.saveEventHandlers.indexOf(handler);
            this.saveEventHandlers.splice(index);
        };
        EntityMock.prototype.save = function (saveMode) {
            var context = this.getSaveContext(saveMode);
            var _loop_1 = function (handler) {
                var index = this_1.saveEventHandlers.indexOf(handler);
                context.getDepth = function () { return index; };
                handler(context);
            };
            var this_1 = this;
            for (var _i = 0, _a = this.saveEventHandlers; _i < _a.length; _i++) {
                var handler = _a[_i];
                _loop_1(handler);
            }
        };
        EntityMock.prototype.getSaveContext = function (saveMode) {
            var _this = this;
            return {
                getContext: function () {
                    return xrm_mock_generator_4.XrmMockGenerator.context;
                },
                getDepth: null,
                getEventArgs: function () {
                    return _this.getSaveEventArgs(saveMode);
                },
                getEventSource: function () {
                    throw new Error("getEventSource not implemented.");
                },
                getFormContext: function () {
                    throw new Error("getFormContext not implemented.");
                },
                getSharedVariable: function () {
                    throw new Error("getSharedVariable not implemented.");
                },
                setSharedVariable: function () {
                    throw new Error("setSharedVariable not implemented.");
                },
            };
        };
        EntityMock.prototype.getSaveEventArgs = function (saveMode) {
            return {
                getSaveMode: function () {
                    var mode;
                    if (saveMode == null) {
                        mode = 1 /* Save */;
                    }
                    else if (saveMode === "saveandclose") {
                        mode = 2 /* SaveAndClose */;
                    }
                    else if (saveMode === "saveandnew") {
                        mode = 59 /* SaveAndNew */;
                    }
                    else {
                        mode = saveMode;
                    }
                    return mode;
                },
                isDefaultPrevented: function () { return false; },
                preventDefault: function () {
                    throw new Error("preventDefault not implemented.");
                },
                preventDefaultOnError: function () {
                    throw new Error("preventDefaultOnError not implemented.");
                }
            };
        };
        return EntityMock;
    }());
    exports.EntityMock = EntityMock;
});
define("xrm-mock/navigation/errordialogoptions/errordialogoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorDialogOptionsMock = void 0;
    var ErrorDialogOptionsMock = /** @class */ (function () {
        function ErrorDialogOptionsMock(details, errorCode, message) {
            this.details = details;
            this.errorCode = errorCode;
            this.message = message;
        }
        return ErrorDialogOptionsMock;
    }());
    exports.ErrorDialogOptionsMock = ErrorDialogOptionsMock;
});
define("xrm-mock/errorresponse/errorresponse.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorResponseMock = void 0;
    var ErrorResponseMock = /** @class */ (function () {
        function ErrorResponseMock(errorCode, message) {
            this.errorCode = errorCode;
            this.message = message;
        }
        return ErrorResponseMock;
    }());
    exports.ErrorResponseMock = ErrorResponseMock;
});
define("xrm-mock/executeresponse/executeresponse.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteResponseMock = void 0;
    var ExecuteResponseMock = /** @class */ (function () {
        function ExecuteResponseMock(components) {
            this.notImplementedError = "ExecuteResponseMock methods not implemented. Consider stubbing calls using a tool such as Sinon.JS";
            this.body = components.body;
            this.headers = components.headers;
            this.ok = components.ok;
            this.redirected = components.redirected;
            this.status = components.status;
            this.statusText = components.statusText;
            this.type = components.type;
            this.url = components.url;
            this.trailer = components.trailer;
            this.bodyUsed = components.bodyUsed;
        }
        ExecuteResponseMock.prototype.arrayBuffer = function () {
            throw new Error(this.notImplementedError);
        };
        ExecuteResponseMock.prototype.blob = function () {
            throw new Error(this.notImplementedError);
        };
        ExecuteResponseMock.prototype.formData = function () {
            throw new Error(this.notImplementedError);
        };
        ExecuteResponseMock.prototype.json = function () {
            throw new Error(this.notImplementedError);
        };
        ExecuteResponseMock.prototype.text = function () {
            throw new Error(this.notImplementedError);
        };
        ExecuteResponseMock.prototype.clone = function () {
            throw new Error(this.notImplementedError);
        };
        return ExecuteResponseMock;
    }());
    exports.ExecuteResponseMock = ExecuteResponseMock;
});
define("xrm-mock/navigation/filedetails/filedetails.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileDetailsMock = void 0;
    var FileDetailsMock = /** @class */ (function () {
        function FileDetailsMock(fileContent, fileName, fileSize, mimeType) {
            this.fileContent = fileContent;
            this.fileName = fileName;
            this.fileSize = fileSize;
            this.mimeType = mimeType;
        }
        return FileDetailsMock;
    }());
    exports.FileDetailsMock = FileDetailsMock;
});
define("xrm-mock/formcontext/formcontext.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormContextMock = void 0;
    var FormContextMock = /** @class */ (function () {
        function FormContextMock(data, ui) {
            this.data = data;
            this.ui = ui;
        }
        FormContextMock.prototype.getAttribute = function (param) {
            if (!arguments.length) {
                return this.data.entity.attributes.get();
            }
            else if (param && typeof param === "string") {
                return this.data.entity.attributes.get(param);
            }
            else if (typeof param === "number") {
                return this.data.entity.attributes.get(param);
            }
            else if (typeof param === "function") {
                return this.data.entity.attributes.get(param);
            }
            throw new Error("Collection.Get called with unknown parameter type: " + typeof param);
        };
        FormContextMock.prototype.getControl = function (param) {
            if (!arguments.length || param === undefined || param === null) {
                return this.ui.controls.get();
            }
            else if (typeof param === "string") {
                return this.ui.controls.get(param);
            }
            else if (typeof param === "number") {
                return this.ui.controls.get(param);
            }
            else if (typeof param === "function") {
                return this.ui.controls.get(param);
            }
            throw new Error("Collection.Get called with unknown parameter type: " + typeof param);
        };
        return FormContextMock;
    }());
    exports.FormContextMock = FormContextMock;
});
define("xrm-mock/utility/formopenparameters/formopenparameters.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormOpenParametersMock = void 0;
    var FormOpenParametersMock = /** @class */ (function () {
        function FormOpenParametersMock(formid, navbar, cmdbar) {
            this.formid = formid;
            this.navbar = navbar;
            this.cmdbar = cmdbar;
        }
        return FormOpenParametersMock;
    }());
    exports.FormOpenParametersMock = FormOpenParametersMock;
});
define("xrm-mock/device/getcurrentpositionresponse/getcurrentpositionresponse.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCurrentPositionResponseMock = void 0;
    var GetCurrentPositionResponseMock = /** @class */ (function () {
        function GetCurrentPositionResponseMock(coords, timestamp) {
            this.coords = coords;
            this.timestamp = timestamp;
        }
        return GetCurrentPositionResponseMock;
    }());
    exports.GetCurrentPositionResponseMock = GetCurrentPositionResponseMock;
});
define("xrm-mock/controls/gridcontrol/gridcontrol.mock", ["require", "exports", "xrm-mock/controls/control/control.mock"], function (require, exports, control_mock_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridControlMock = void 0;
    var GridControlMock = /** @class */ (function (_super) {
        __extends(GridControlMock, _super);
        function GridControlMock(components) {
            var _this = _super.call(this, GridControlMock.defaultComponents(components)) || this;
            _this.contextType = components.contextType;
            _this.entityName = components.entityName;
            _this.onLoadHandlers = components.onLoadHandlers;
            _this.viewSelector = components.viewSelector;
            _this.grid = components.grid;
            _this.relationship = components.relationship;
            return _this;
        }
        GridControlMock.defaultComponents = function (components) {
            components.controlType = "subgrid";
            components.contextType = components.contextType || 4;
            components.entityName = components.entityName || "contact";
            components.onLoadHandlers = components.onLoadHandlers || [];
            return components;
        };
        GridControlMock.prototype.setVisible = function (visible) {
            throw new Error("Method not implemented.");
        };
        GridControlMock.prototype.refreshRibbon = function () {
            throw new Error("Method not implemented.");
        };
        GridControlMock.prototype.addOnLoad = function (handler) {
            this.onLoadHandlers.push(handler);
        };
        GridControlMock.prototype.getContextType = function () {
            return this.contextType;
        };
        GridControlMock.prototype.getEntityName = function () {
            return this.entityName;
        };
        GridControlMock.prototype.getGrid = function () {
            return this.grid;
        };
        GridControlMock.prototype.getViewSelector = function () {
            return this.viewSelector;
        };
        GridControlMock.prototype.refresh = function () {
            throw new Error("Method not implemented.");
        };
        GridControlMock.prototype.removeOnLoad = function (handler) {
            for (var i = this.onLoadHandlers.length - 1; i >= 0; i--) {
                var func = this.onLoadHandlers[i];
                if (func === handler) {
                    this.onLoadHandlers.splice(i, 1);
                    break;
                }
            }
        };
        GridControlMock.prototype.getFetchXml = function () {
            throw new Error("getFetchXml not implemented.");
        };
        GridControlMock.prototype.getGridType = function () {
            throw new Error("getGridType not implemented.");
        };
        GridControlMock.prototype.getRelationship = function () {
            return this.relationship;
        };
        GridControlMock.prototype.getUrl = function (client) {
            throw new Error("getUrl not implemented.");
        };
        GridControlMock.prototype.openRelatedGrid = function () {
            throw new Error("openRelatedGrid not implemented.");
        };
        return GridControlMock;
    }(control_mock_2.ControlMock));
    exports.GridControlMock = GridControlMock;
});
define("xrm-mock/controls/grid/gridentity/gridentity.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridEntityMock = void 0;
    var GridEntityMock = /** @class */ (function () {
        function GridEntityMock(reference) {
            this.reference = reference;
        }
        GridEntityMock.prototype.getEntityName = function () {
            return this.reference.entityType;
        };
        GridEntityMock.prototype.getEntityReference = function () {
            return this.reference;
        };
        GridEntityMock.prototype.getId = function () {
            return this.reference.id;
        };
        GridEntityMock.prototype.getPrimaryAttributeValue = function () {
            return this.reference.name;
        };
        return GridEntityMock;
    }());
    exports.GridEntityMock = GridEntityMock;
});
define("xrm-mock/controls/grid/grid.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridMock = void 0;
    var GridMock = /** @class */ (function () {
        function GridMock(rows, selectedRows) {
            this.rows = rows;
            this.selectedRows = selectedRows;
        }
        GridMock.prototype.getRows = function () {
            return this.rows;
        };
        GridMock.prototype.getSelectedRows = function () {
            return this.selectedRows;
        };
        GridMock.prototype.getTotalRecordCount = function () {
            return this.rows.getLength();
        };
        return GridMock;
    }());
    exports.GridMock = GridMock;
});
define("xrm-mock/controls/grid/gridrow/gridrow.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridRowMock = void 0;
    var GridRowMock = /** @class */ (function () {
        function GridRowMock(data, gridRowData) {
            this.data = data;
            this.gridRowData = gridRowData;
        }
        GridRowMock.prototype.getData = function () {
            return this.gridRowData;
        };
        return GridRowMock;
    }());
    exports.GridRowMock = GridRowMock;
});
define("xrm-mock/controls/grid/gridrowdata/gridrowdata.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridRowDataMock = void 0;
    var GridRowDataMock = /** @class */ (function () {
        function GridRowDataMock(entity) {
            this.entity = entity;
        }
        GridRowDataMock.prototype.getEntity = function () {
            return this.entity;
        };
        return GridRowDataMock;
    }());
    exports.GridRowDataMock = GridRowDataMock;
});
define("xrm-mock/metadata/label/label.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LabelMock = void 0;
    var LabelMock = /** @class */ (function () {
        function LabelMock(localLabels, userLocalLabels) {
            this.LocalizedLabels = localLabels;
            this.UserLocalizedLabel = userLocalLabels;
        }
        return LabelMock;
    }());
    exports.LabelMock = LabelMock;
});
define("xrm-mock/metadata/localizedlabel/localizedlabel.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LocalizedLabelMock = void 0;
    var LocalizedLabelMock = /** @class */ (function () {
        function LocalizedLabelMock(label, languageCode) {
            this.Label = label;
            this.LanguageCode = languageCode;
        }
        return LocalizedLabelMock;
    }());
    exports.LocalizedLabelMock = LocalizedLabelMock;
});
define("xrm-mock/controls/lookupcontrol/lookupcontrol.mock", ["require", "exports", "xrm-mock/controls/standardcontrol/standardcontrol.mock"], function (require, exports, standardcontrol_mock_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LookupControlMock = void 0;
    var LookupControlMock = /** @class */ (function (_super) {
        __extends(LookupControlMock, _super);
        function LookupControlMock(components) {
            var _this = _super.call(this, LookupControlMock.defaultComponents(components)) || this;
            _this.entityTypes = components.entityTypes || [];
            _this.filters = components.filters || [];
            _this.onLookupTagHandlers = components.onLookupTagHandlers || [];
            _this.preSearchHandlers = components.preSearchHandlers || [];
            _this.views = components.views || [];
            if (_this.views && _this.views.length > 1) {
                var defaultViews = _this.views.filter(function (v) { return v.isDefault; }).length;
                if (defaultViews > 1) {
                    throw new Error("Lookup Control cannot have more than one default view.");
                }
                else if (defaultViews === 0) {
                    _this.views[0].isDefault = true;
                }
            }
            return _this;
        }
        LookupControlMock.defaultComponents = function (components) {
            components.controlType = "lookup";
            return components;
        };
        LookupControlMock.prototype.addOnLookupTagClick = function (handler) {
            this.onLookupTagHandlers.push(handler);
        };
        LookupControlMock.prototype.addPreSearch = function (handler) {
            this.preSearchHandlers.push(handler);
        };
        LookupControlMock.prototype.addCustomFilter = function (filter, entityLogicalName) {
            this.filters.push({ filter: filter, entityLogicalName: entityLogicalName });
        };
        LookupControlMock.prototype.addCustomView = function (viewId, entityName, viewDisplayName, fetchXml, layoutXml, isDefault) {
            if (isDefault && this.getDefaultView()) {
                throw new Error("Lookup Control cannot have more than one default view.");
            }
            this.views.push({
                entityName: entityName,
                fetchXml: fetchXml,
                isDefault: isDefault,
                layoutXml: layoutXml,
                viewDisplayName: viewDisplayName,
                viewId: viewId,
            });
        };
        LookupControlMock.prototype.fireOnLookupTagClick = function (context) {
            for (var _i = 0, _a = this.onLookupTagHandlers; _i < _a.length; _i++) {
                var handler = _a[_i];
                handler(context);
            }
        };
        LookupControlMock.prototype.firePreSearch = function (context) {
            for (var _i = 0, _a = this.preSearchHandlers; _i < _a.length; _i++) {
                var handler = _a[_i];
                handler(context);
            }
        };
        LookupControlMock.prototype.getDefaultView = function () {
            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                if (view.isDefault) {
                    return view.viewId;
                }
            }
            throw new Error("No default view was found!");
        };
        LookupControlMock.prototype.getEntityTypes = function () {
            return this.entityTypes;
        };
        LookupControlMock.prototype.setEntityTypes = function (entityLogicalNames) {
            this.entityTypes = entityLogicalNames;
        };
        LookupControlMock.prototype.removeOnLookupTagClick = function (handler) {
            var index = this.onLookupTagHandlers.indexOf(handler);
            while (index >= 0) {
                this.onLookupTagHandlers.splice(index, 1);
                index = this.onLookupTagHandlers.indexOf(handler);
            }
        };
        LookupControlMock.prototype.removePreSearch = function (handler) {
            var index = this.preSearchHandlers.indexOf(handler);
            while (index >= 0) {
                this.preSearchHandlers.splice(index, 1);
                index = this.preSearchHandlers.indexOf(handler);
            }
        };
        LookupControlMock.prototype.setDefaultView = function (viewGuid) {
            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.isDefault = view.viewId === viewGuid;
            }
        };
        return LookupControlMock;
    }(standardcontrol_mock_4.StandardControlMock));
    exports.LookupControlMock = LookupControlMock;
});
define("xrm-mock/attributes/lookupattribute/lookupattribute.mock", ["require", "exports", "xrm-mock/attributes/attribute/attribute.mock"], function (require, exports, attribute_mock_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LookupAttributeMock = void 0;
    var LookupAttributeMock = /** @class */ (function (_super) {
        __extends(LookupAttributeMock, _super);
        function LookupAttributeMock(components) {
            var _this = _super.call(this, LookupAttributeMock.defaultComponents(components)) || this;
            _this.isPartyList = components.isPartyList;
            return _this;
        }
        LookupAttributeMock.defaultComponents = function (components) {
            if (!("isPartyList" in components)) {
                components.isPartyList = false;
            }
            components.attributeType = "lookup";
            return components;
        };
        LookupAttributeMock.prototype.getIsPartyList = function () {
            return this.isPartyList;
        };
        return LookupAttributeMock;
    }(attribute_mock_3.AttributeMock));
    exports.LookupAttributeMock = LookupAttributeMock;
});
define("xrm-mock/lookupoptions/lookupoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LookupOptionsMock = void 0;
    var LookupOptionsMock = /** @class */ (function () {
        function LookupOptionsMock(components) {
            this.allowMultiSelect = components.allowMultiSelect;
            this.defaultEntityType = components.defaultEntityType;
            this.defaultViewId = components.defaultViewId;
            this.entityTypes = components.entityTypes;
            this.showBarcodeScanner = components.showBarcodeScanner;
            this.viewIds = components.viewIds;
        }
        return LookupOptionsMock;
    }());
    exports.LookupOptionsMock = LookupOptionsMock;
});
define("xrm-mock/lookupvalue/lookupvalue.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LookupValueMock = void 0;
    var LookupValueMock = /** @class */ (function () {
        function LookupValueMock(id, entityType, name) {
            this.id = id;
            this.entityType = entityType;
            this.name = name;
        }
        return LookupValueMock;
    }());
    exports.LookupValueMock = LookupValueMock;
});
define("xrm-mock/controls/navigation/navigation.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NavigationMock = void 0;
    var NavigationMock = /** @class */ (function () {
        function NavigationMock(items) {
            this.items = items;
        }
        return NavigationMock;
    }());
    exports.NavigationMock = NavigationMock;
});
define("xrm-mock/controls/navigationitem/navigationitem.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NavigationItemMock = void 0;
    var NavigationItemMock = /** @class */ (function () {
        function NavigationItemMock(id, standardElement, focusable) {
            this.id = id;
            this.standardElement = standardElement;
            this.focusable = focusable;
        }
        NavigationItemMock.prototype.setVisible = function (visible) {
            return this.standardElement.setVisible(visible);
        };
        NavigationItemMock.prototype.getVisible = function () {
            return this.standardElement.getVisible();
        };
        NavigationItemMock.prototype.getLabel = function () {
            return this.standardElement.getLabel();
        };
        NavigationItemMock.prototype.setLabel = function (label) {
            return this.standardElement.setLabel(label);
        };
        NavigationItemMock.prototype.setFocus = function () {
            return this.focusable.setFocus();
        };
        NavigationItemMock.prototype.getId = function () {
            return this.id;
        };
        return NavigationItemMock;
    }());
    exports.NavigationItemMock = NavigationItemMock;
});
define("xrm-mock/navigation/navigation.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NavigationStaticMock = void 0;
    var NavigationStaticMock = /** @class */ (function () {
        function NavigationStaticMock() {
            this.notImplementedError = "Navigation methods not implemented. Consider stubbing calls using a tool such as Sinon.JS";
        }
        NavigationStaticMock.prototype.navigateTo = function (pageInput, navigationOptions) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openAlertDialog = function (alertStrings, alertOptions) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openConfirmDialog = function (param) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openErrorDialog = function (errorOptions) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openFile = function (file, openFileOptions) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openForm = function (entityFormOptions, formParameters) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openUrl = function (url, openUrlOptions) {
            throw new Error(this.notImplementedError);
        };
        NavigationStaticMock.prototype.openWebResource = function (webResourceName, windowOptions, data) {
            throw new Error(this.notImplementedError);
        };
        return NavigationStaticMock;
    }());
    exports.NavigationStaticMock = NavigationStaticMock;
});
define("xrm-mock/controls/numbercontrol/numbercontrol.mock", ["require", "exports", "xrm-mock/controls/autolookupcontrol/autolookupcontrol.mock"], function (require, exports, autolookupcontrol_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberControlMock = void 0;
    var NumberControlMock = /** @class */ (function (_super) {
        __extends(NumberControlMock, _super);
        function NumberControlMock(components) {
            return _super.call(this, NumberControlMock.defaultComponents(components)) || this;
        }
        NumberControlMock.defaultComponents = function (components) {
            return components;
        };
        return NumberControlMock;
    }(autolookupcontrol_mock_1.AutoLookupControlMock));
    exports.NumberControlMock = NumberControlMock;
});
define("xrm-mock/attributes/numberattribute/numberattribute.mock", ["require", "exports", "xrm-mock/attributes/attribute/attribute.mock"], function (require, exports, attribute_mock_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberAttributeMock = void 0;
    var NumberAttributeMock = /** @class */ (function (_super) {
        __extends(NumberAttributeMock, _super);
        function NumberAttributeMock(components) {
            var _this = _super.call(this, NumberAttributeMock.defaultComponents(components)) || this;
            _this.min = components.min;
            _this.max = components.max;
            _this.precision = components.precision;
            _this.validatePrecision();
            return _this;
        }
        NumberAttributeMock.defaultComponents = function (components) {
            components.format = components.format || "none";
            components.precision = components.precision || 0;
            if (!components.attributeType) {
                components.attributeType = "decimal";
            }
            return components;
        };
        NumberAttributeMock.prototype.getFormat = function () {
            return _super.prototype.getFormat.call(this);
        };
        NumberAttributeMock.prototype.getMax = function () {
            return this.max;
        };
        NumberAttributeMock.prototype.getMin = function () {
            return this.min;
        };
        NumberAttributeMock.prototype.getPrecision = function () {
            return this.precision;
        };
        NumberAttributeMock.prototype.setPrecision = function (value) {
            this.precision = value;
        };
        NumberAttributeMock.prototype.setValue = function (value) {
            if ((this.min || this.min === 0) && this.min > value) {
                throw new Error(("value cannot be below the min of " + this.min));
            }
            else if ((this.max || this.max === 0) && this.max < value) {
                throw new Error(("value cannot be above the max of " + this.max));
            }
            else {
                _super.prototype.setValue.call(this, value);
            }
        };
        NumberAttributeMock.prototype.validatePrecision = function () {
            if (this.precision > 10) {
                throw new Error(("precision cannot be greater than 10, but was " + this.precision));
            }
            else if (this.precision < 0) {
                throw new Error(("precision cannot be less than 0, but was " + this.precision));
            }
        };
        return NumberAttributeMock;
    }(attribute_mock_4.AttributeMock));
    exports.NumberAttributeMock = NumberAttributeMock;
});
define("xrm-mock/utility/openparameters/openparameters.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenParametersMock = void 0;
    var OpenParametersMock = /** @class */ (function () {
        function OpenParametersMock() {
        }
        return OpenParametersMock;
    }());
    exports.OpenParametersMock = OpenParametersMock;
});
define("xrm-mock/navigation/openwebresourceoptions/openwebresourceoptions.mock", ["require", "exports", "xrm-mock/navigation/dialogsizeoptions/dialogsizeoptions.mock"], function (require, exports, dialogsizeoptions_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenWebresourceOptionsMock = void 0;
    var OpenWebresourceOptionsMock = /** @class */ (function (_super) {
        __extends(OpenWebresourceOptionsMock, _super);
        function OpenWebresourceOptionsMock(openInNewWindow, height, width) {
            var _this = _super.call(this, height, width) || this;
            _this.openInNewWindow = openInNewWindow;
            return _this;
        }
        return OpenWebresourceOptionsMock;
    }(dialogsizeoptions_mock_1.DialogSizeOptionsMock));
    exports.OpenWebresourceOptionsMock = OpenWebresourceOptionsMock;
});
define("xrm-mock/optionsetvalue/optionsetvalue.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionSetValueMock = void 0;
    var OptionSetValueMock = /** @class */ (function () {
        function OptionSetValueMock(text, value) {
            this.text = text;
            this.value = value;
        }
        return OptionSetValueMock;
    }());
    exports.OptionSetValueMock = OptionSetValueMock;
});
define("xrm-mock/controls/optionsetcontrol/optionsetcontrol.mock", ["require", "exports", "xrm-mock/controls/standardcontrol/standardcontrol.mock"], function (require, exports, standardcontrol_mock_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionSetControlMock = void 0;
    var OptionSetControlMock = /** @class */ (function (_super) {
        __extends(OptionSetControlMock, _super);
        function OptionSetControlMock(components) {
            var _this = _super.call(this, OptionSetControlMock.defaultComponents(components)) || this;
            _this.options = components.options || [];
            return _this;
        }
        OptionSetControlMock.defaultComponents = function (components) {
            components.controlType = "optionset";
            return components;
        };
        OptionSetControlMock.prototype.addOption = function (option, index) {
            index = index || index === 0
                ? index
                : this.options.length;
            this.options.splice(index, 0, option);
        };
        OptionSetControlMock.prototype.clearOptions = function () {
            var length = this.options.length;
            if (length) {
                this.options.splice(0, length);
            }
        };
        OptionSetControlMock.prototype.removeOption = function (value) {
            var option;
            for (var _i = 0, _a = this.options; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.value === value) {
                    option = item;
                    break;
                }
            }
            var index = this.options.indexOf(option);
            this.options.splice(index, 1);
            // check if attribute is linked and update the removal accordingly
            if (this.attribute && this.attribute.options) {
                var attrOption = void 0;
                for (var _b = 0, _c = this.attribute.options; _b < _c.length; _b++) {
                    var item2 = _c[_b];
                    if (item2.value === value) {
                        attrOption = item2;
                        break;
                    }
                }
                var attrIndex = this.attribute.options.indexOf(attrOption);
                this.attribute.options.splice(attrIndex, 1);
            }
        };
        OptionSetControlMock.prototype.getOptions = function () {
            return this.options;
        };
        return OptionSetControlMock;
    }(standardcontrol_mock_5.StandardControlMock));
    exports.OptionSetControlMock = OptionSetControlMock;
});
define("xrm-mock/attributes/optionsetattribute/optionsetattribute.mock", ["require", "exports", "xrm-mock/optionsetvalue/optionsetvalue.mock", "xrm-mock/attributes/enumattribute/enumattribute.mock"], function (require, exports, optionsetvalue_mock_1, enumattribute_mock_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionSetAttributeMock = void 0;
    var OptionSetAttributeMock = /** @class */ (function (_super) {
        __extends(OptionSetAttributeMock, _super);
        function OptionSetAttributeMock(components) {
            var _this = _super.call(this, OptionSetAttributeMock.defaultComponents(components)) || this;
            _this.options = components.options
                ? components.options.map(function (o) {
                    return new optionsetvalue_mock_1.OptionSetValueMock(o.text, o.value);
                })
                : components.value || components.value === 0
                    ? [{
                            text: components.value.toString(),
                            value: components.value,
                        }]
                    : [];
            _this.format = components.format || "language";
            _this.selectedOption = _this.getOption(_this.getValue());
            return _this;
        }
        OptionSetAttributeMock.create = function (name, value) {
            return new OptionSetAttributeMock({ name: name, value: value });
        };
        OptionSetAttributeMock.defaultComponents = function (components) {
            components.attributeType = "optionset";
            return components;
        };
        OptionSetAttributeMock.prototype.getFormat = function () {
            return _super.prototype.getFormat.call(this);
        };
        OptionSetAttributeMock.prototype.getOption = function (param) {
            return typeof param === "number"
                ? this.options.filter(function (o) { return o.value === param; })[0]
                : this.options.filter(function (o) { return o.text === param; })[0];
        };
        OptionSetAttributeMock.prototype.getOptions = function () {
            return this.options;
        };
        OptionSetAttributeMock.prototype.getSelectedOption = function () {
            return this.selectedOption;
        };
        OptionSetAttributeMock.prototype.getText = function () {
            return this.selectedOption.text;
        };
        OptionSetAttributeMock.prototype.setValue = function (value) {
            _super.prototype.setValue.call(this, value);
            this.selectedOption = this.getOption(value);
        };
        return OptionSetAttributeMock;
    }(enumattribute_mock_2.EnumAttributeMock));
    exports.OptionSetAttributeMock = OptionSetAttributeMock;
});
define("xrm-mock/metadata/optionmetadata/optionmetadata.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionMetadataMock = void 0;
    var OptionMetadataMock = /** @class */ (function () {
        function OptionMetadataMock(components) {
            this.Value = components.Value;
            this.Color = components.Color;
            this.IsManaged = components.IsManaged;
            this.ExternalValue = components.ExternalValue;
            this.MetadataId = components.MetadataId;
            this.HasChanged = components.HasChanged;
            this.State = components.State;
            this.TransitionData = components.TransitionData;
            this.Label = components.Label;
            this.Description = components.Description;
        }
        return OptionMetadataMock;
    }());
    exports.OptionMetadataMock = OptionMetadataMock;
});
define("xrm-mock/organizationsettings/organizationsettings.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrganizationSettingsMock = void 0;
    var OrganizationSettingsMock = /** @class */ (function () {
        function OrganizationSettingsMock(components) {
            this.baseCurrencyId = components.baseCurrencyId;
            this.defaultCountryCode = components.defaultCountryCode;
            this.isAutoSaveEnabled = components.isAutoSaveEnabled;
            this.languageId = components.languageId;
            this.organizationId = components.organizationId;
            this.uniqueName = components.uniqueName;
            this.useSkypeProtocol = components.useSkypeProtocol;
            this.baseCurrency = components.baseCurrency;
            this.attributes = components.attributes;
        }
        return OrganizationSettingsMock;
    }());
    exports.OrganizationSettingsMock = OrganizationSettingsMock;
});
define("xrm-mock/page/page.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PageMock = void 0;
    var PageMock = /** @class */ (function () {
        function PageMock(context, formContext) {
            this.context = context;
            this.data = formContext.data;
            this.ui = formContext.ui;
        }
        PageMock.prototype.getAttribute = function (param) {
            if (!arguments.length) {
                return this.data.entity.attributes.get();
            }
            else if (param && typeof param === "string") {
                return this.data.entity.attributes.get(param);
            }
            else if (typeof param === "number") {
                return this.data.entity.attributes.get(param);
            }
            else if (typeof param === "function") {
                return this.data.entity.attributes.get(param);
            }
            throw new Error("Collection.Get called with unknown parameter type: " + typeof param);
        };
        PageMock.prototype.getControl = function (param) {
            if (!arguments.length || param === undefined || param === null) {
                return this.ui.controls.get();
            }
            else if (typeof param === "string") {
                return this.ui.controls.get(param);
            }
            else if (typeof param === "number") {
                return this.ui.controls.get(param);
            }
            else if (typeof param === "function") {
                return this.ui.controls.get(param);
            }
            throw new Error("Collection.Get called with unknown parameter type: " + typeof param);
        };
        return PageMock;
    }());
    exports.PageMock = PageMock;
});
define("xrm-mock/panel/panel.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PanelMock = void 0;
    var PanelMock = /** @class */ (function () {
        function PanelMock() {
        }
        PanelMock.prototype.loadPanel = function (url, title) {
            throw new Error("Not implemented.");
        };
        return PanelMock;
    }());
    exports.PanelMock = PanelMock;
});
define("xrm-mock/device/pickfileoptions/pickfileoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PickFileOptionsMock = void 0;
    var PickFileOptionsMock = /** @class */ (function () {
        function PickFileOptionsMock(accept, allowMultipleFiles, maximumAllowedFileSize) {
            this.accept = accept;
            this.allowMultipleFiles = allowMultipleFiles;
            this.maximumAllowedFileSize = maximumAllowedFileSize;
        }
        return PickFileOptionsMock;
    }());
    exports.PickFileOptionsMock = PickFileOptionsMock;
});
define("xrm-mock/privilege/privilege.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrivilegeMock = void 0;
    var PrivilegeMock = /** @class */ (function () {
        function PrivilegeMock(canRead, canUpdate, canCreate) {
            this.canRead = canRead;
            this.canUpdate = canUpdate;
            this.canCreate = canCreate;
        }
        return PrivilegeMock;
    }());
    exports.PrivilegeMock = PrivilegeMock;
});
define("xrm-mock/controls/processcontrol/processcontrol.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProcessControlMock = void 0;
    var ProcessControlMock = /** @class */ (function () {
        function ProcessControlMock(displayState, getVisibleElement, setVisibleElement) {
            this.displayState = displayState;
            this.getVisibleElement = getVisibleElement;
            this.setVisibleElement = setVisibleElement;
        }
        ProcessControlMock.prototype.getVisible = function () {
            return this.getVisibleElement.getVisible();
        };
        ProcessControlMock.prototype.setVisible = function (visible) {
            return this.setVisibleElement.setVisible(visible);
        };
        ProcessControlMock.prototype.setDisplayState = function (displayState) {
            this.displayState = displayState;
        };
        ProcessControlMock.prototype.getDisplayState = function () {
            return this.displayState;
        };
        ProcessControlMock.prototype.reflow = function (updateUI, parentStage, nextStage) {
            throw new Error("Not implemented.");
        };
        return ProcessControlMock;
    }());
    exports.ProcessControlMock = ProcessControlMock;
});
define("xrm-mock/processflow/processdictionary/processdictionary.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProcessDictionaryMock = void 0;
    var ProcessDictionaryMock = /** @class */ (function () {
        function ProcessDictionaryMock(index) {
            this[index] = index;
        }
        return ProcessDictionaryMock;
    }());
    exports.ProcessDictionaryMock = ProcessDictionaryMock;
});
define("xrm-mock/processflow/stage/stage.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StageMock = void 0;
    var StageMock = /** @class */ (function () {
        function StageMock(id, name, status, category, steps) {
            this.id = id;
            this.name = name;
            this.status = status;
            this.category = category;
            this.steps = steps;
        }
        StageMock.prototype.getCategory = function () {
            var stageCategory = this.category;
            return {
                getValue: function () {
                    return stageCategory;
                },
            };
        };
        StageMock.prototype.getEntityName = function () {
            throw new Error("get entity name not implemented");
        };
        StageMock.prototype.getId = function () {
            return this.id;
        };
        StageMock.prototype.getName = function () {
            return this.name;
        };
        StageMock.prototype.getStatus = function () {
            return this.status;
        };
        StageMock.prototype.getSteps = function () {
            return this.steps;
        };
        StageMock.prototype._setStatus = function (status) {
            this.status = status;
        };
        StageMock.prototype.getNavigationBehavior = function () {
            throw new Error("getNavigationBehavior not implemented");
        };
        return StageMock;
    }());
    exports.StageMock = StageMock;
});
define("xrm-mock/processflow/processmanager/processmanager.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProcessManagerMock = void 0;
    var ProcessManagerMock = /** @class */ (function () {
        function ProcessManagerMock(enabledProcesses) {
            this.enabledProcesses = enabledProcesses;
        }
        ProcessManagerMock.prototype.addOnPreProcessStatusChange = function (handler) {
            throw new Error("Method not implemented.");
        };
        ProcessManagerMock.prototype.addOnPreStageChange = function (handler) {
            throw new Error("Method not implemented.");
        };
        ProcessManagerMock.prototype.removeOnPreProcessStatusChange = function (handler) {
            throw new Error("Method not implemented.");
        };
        ProcessManagerMock.prototype.removeOnPreStageChange = function (handler) {
            throw new Error("Method not implemented.");
        };
        ProcessManagerMock.prototype.getActiveProcess = function () {
            return this.enabledProcesses.filter(function (p) {
                return p.isRendered();
            })[0] || undefined;
        };
        ProcessManagerMock.prototype.setActiveProcess = function (processId, callbackFunction) {
            var activeProcess = this.getActiveProcess();
            if (activeProcess) {
                var newProcess = this.enabledProcesses.filter(function (p) {
                    return p.getId() === processId;
                })[0] || undefined;
                if (newProcess) {
                    activeProcess.isRendered = function () { return false; };
                    newProcess.isRendered = function () { return true; };
                }
            }
        };
        ProcessManagerMock.prototype.setActiveProcessInstance = function (processInstanceId, callbackFunction) {
            throw new Error("set active process instance not implemented.");
        };
        ProcessManagerMock.prototype.getProcessInstances = function (callbackFunction) {
            throw new Error("get process instances not implemented.");
        };
        ProcessManagerMock.prototype.addOnProcessStatusChange = function (handler) {
            throw new Error("add on process status change not implemented.");
        };
        ProcessManagerMock.prototype.removeOnProcessStatusChange = function (handler) {
            throw new Error("remove on process status change not implemented.");
        };
        ProcessManagerMock.prototype.getInstanceId = function () {
            var activeProcess = this.getActiveProcess();
            var instanceId = activeProcess.getId() || "";
            return instanceId;
        };
        ProcessManagerMock.prototype.getInstanceName = function () {
            var activeProcess = this.getActiveProcess();
            var instanceName = activeProcess.getName();
            return instanceName;
        };
        ProcessManagerMock.prototype.getStatus = function () {
            throw new Error("get status not implemented.");
        };
        ProcessManagerMock.prototype.setStatus = function (status, callbackFunction) {
            throw new Error("set status not implemented.");
        };
        ProcessManagerMock.prototype.getActiveStage = function () {
            var activeProcess = this.getActiveProcess();
            var stages = activeProcess.getStages();
            var activeStages = [];
            stages.forEach(function (s) {
                if (s.getStatus() === "active") {
                    activeStages.push(s);
                }
            });
            return activeStages[0] || undefined;
        };
        ProcessManagerMock.prototype.setActiveStage = function (stageId, callbackFunction) {
            var activeProcess = this.getActiveProcess();
            var stages = activeProcess.getStages();
            var setStatus = "";
            stages.forEach(function (s) {
                if (s.getId() === stageId) {
                    s._setStatus("active");
                    setStatus = "active";
                }
                else {
                    s._setStatus("inactive");
                }
            });
            if (callbackFunction) {
                callbackFunction(setStatus);
            }
        };
        ProcessManagerMock.prototype.getActivePath = function () {
            throw new Error("get active path not implemented");
        };
        ProcessManagerMock.prototype.getEnabledProcesses = function (callbackFunction) {
            callbackFunction(this.enabledProcesses);
        };
        ProcessManagerMock.prototype.getSelectedStage = function () {
            throw new Error("get selected not implemented");
        };
        ProcessManagerMock.prototype.addOnStageChange = function (handler) {
            throw new Error("add on stage change not implemented");
        };
        ProcessManagerMock.prototype.addOnStageSelected = function (handler) {
            throw new Error("add on stage selected not implemented");
        };
        ProcessManagerMock.prototype.removeOnStageChange = function (handler) {
            throw new Error("remove on stage change not implemented");
        };
        ProcessManagerMock.prototype.removeOnStageSelected = function (handler) {
            throw new Error("remove on stage selected not implemented");
        };
        ProcessManagerMock.prototype.moveNext = function (callbackFunction) {
            throw new Error("move next not implemented");
        };
        ProcessManagerMock.prototype.movePrevious = function (callbackFunction) {
            throw new Error("move previous not implemented");
        };
        return ProcessManagerMock;
    }());
    exports.ProcessManagerMock = ProcessManagerMock;
});
define("xrm-mock/processflow/process/process.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProcessMock = void 0;
    var ProcessMock = /** @class */ (function () {
        function ProcessMock(components) {
            this.id = components.id;
            this.name = components.name;
            this.stages = components.stages;
            this.rendered = components.rendered;
        }
        ProcessMock.prototype.getId = function () {
            return this.id;
        };
        ProcessMock.prototype.getName = function () {
            return this.name;
        };
        ProcessMock.prototype.getStages = function () {
            return this.stages;
        };
        ProcessMock.prototype.isRendered = function () {
            return this.rendered;
        };
        return ProcessMock;
    }());
    exports.ProcessMock = ProcessMock;
});
define("xrm-mock/navigation/relationship/relationship.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelationshipMock = void 0;
    var RelationshipMock = /** @class */ (function () {
        function RelationshipMock(components) {
            this.attributeName = components.attributeName;
            this.name = components.name;
            this.navigationPropertyName = components.navigationPropertyName;
            this.relationshipType = components.relationshipType;
            this.roleType = components.roleType;
        }
        return RelationshipMock;
    }());
    exports.RelationshipMock = RelationshipMock;
});
define("xrm-mock/url/reportopenparameters/reportopenparameters.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReportOpenParametersMock = void 0;
    var ReportOpenParametersMock = /** @class */ (function () {
        function ReportOpenParametersMock(action, id, helpID) {
            this.action = action;
            this.id = id;
            this.helpID = helpID;
        }
        return ReportOpenParametersMock;
    }());
    exports.ReportOpenParametersMock = ReportOpenParametersMock;
});
define("xrm-mock/retrievemultiplerequest/retrievemultiplerequest.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetrieveMultipleRequestMock = void 0;
    var RetrieveMultipleRequestMock = /** @class */ (function () {
        function RetrieveMultipleRequestMock(entities, nextLink) {
            this.entities = entities;
            this.nextLink = nextLink;
        }
        return RetrieveMultipleRequestMock;
    }());
    exports.RetrieveMultipleRequestMock = RetrieveMultipleRequestMock;
});
define("xrm-mock/events/saveeventarguments/saveeventarguments.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SaveEventArgumentsMock = void 0;
    var SaveEventArgumentsMock = /** @class */ (function () {
        function SaveEventArgumentsMock() {
        }
        SaveEventArgumentsMock.prototype.preventDefaultOnError = function () {
            throw new Error("Method not implemented.");
        };
        SaveEventArgumentsMock.prototype.getSaveMode = function () {
            throw new Error("Not implemented.");
        };
        SaveEventArgumentsMock.prototype.isDefaultPrevented = function () {
            throw new Error("Not implemented.");
        };
        SaveEventArgumentsMock.prototype.preventDefault = function () {
            throw new Error("Not implemented.");
        };
        return SaveEventArgumentsMock;
    }());
    exports.SaveEventArgumentsMock = SaveEventArgumentsMock;
});
define("xrm-mock/events/saveeventcontext/saveeventcontext.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SaveEventContextMock = void 0;
    var SaveEventContextMock = /** @class */ (function () {
        function SaveEventContextMock(eventContext) {
            this.eventContext = eventContext;
        }
        SaveEventContextMock.prototype.getContext = function () {
            return this.eventContext.getContext();
        };
        SaveEventContextMock.prototype.getDepth = function () {
            return this.eventContext.getDepth();
        };
        SaveEventContextMock.prototype.getEventSource = function () {
            return this.eventContext.getEventSource();
        };
        SaveEventContextMock.prototype.getFormContext = function () {
            return this.eventContext.getFormContext();
        };
        SaveEventContextMock.prototype.getSharedVariable = function (key) {
            return this.eventContext.getSharedVariable(key);
        };
        SaveEventContextMock.prototype.setSharedVariable = function (key, value) {
            return this.setSharedVariable(key, value);
        };
        SaveEventContextMock.prototype.getEventArgs = function () {
            throw new Error("Not implemented.");
        };
        return SaveEventContextMock;
    }());
    exports.SaveEventContextMock = SaveEventContextMock;
});
define("xrm-mock/saveoptions/saveoptions.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SaveOptionsMock = void 0;
    var SaveOptionsMock = /** @class */ (function () {
        function SaveOptionsMock(UseSchedulingEngine) {
            this.UseSchedulingEngine = UseSchedulingEngine;
        }
        return SaveOptionsMock;
    }());
    exports.SaveOptionsMock = SaveOptionsMock;
});
define("xrm-mock/events/stagechangeeventarguments/stagechangeeventarguments.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StageChangeEventArgumentsMock = void 0;
    var StageChangeEventArgumentsMock = /** @class */ (function () {
        function StageChangeEventArgumentsMock() {
        }
        StageChangeEventArgumentsMock.prototype.preventDefault = function () {
            throw new Error("Method not implemented.");
        };
        StageChangeEventArgumentsMock.prototype.getDirection = function () {
            throw new Error("Not implemented.");
        };
        StageChangeEventArgumentsMock.prototype.getStage = function () {
            throw new Error("Not implemented.");
        };
        return StageChangeEventArgumentsMock;
    }());
    exports.StageChangeEventArgumentsMock = StageChangeEventArgumentsMock;
});
define("xrm-mock/events/stagechangeeventcontext/stagechangeeventcontext.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StageChangeEventContextMock = void 0;
    var StageChangeEventContextMock = /** @class */ (function () {
        function StageChangeEventContextMock(eventContext) {
            this.eventContext = eventContext;
        }
        StageChangeEventContextMock.prototype.getContext = function () {
            return this.eventContext.getContext();
        };
        StageChangeEventContextMock.prototype.getDepth = function () {
            return this.eventContext.getDepth();
        };
        StageChangeEventContextMock.prototype.getEventSource = function () {
            return this.eventContext.getEventSource();
        };
        StageChangeEventContextMock.prototype.getFormContext = function () {
            return this.eventContext.getFormContext();
        };
        StageChangeEventContextMock.prototype.getSharedVariable = function (key) {
            return this.eventContext.getSharedVariable(key);
        };
        StageChangeEventContextMock.prototype.setSharedVariable = function (key, value) {
            return this.setSharedVariable(key, value);
        };
        StageChangeEventContextMock.prototype.getEventArgs = function () {
            throw new Error("Not implemented.");
        };
        return StageChangeEventContextMock;
    }());
    exports.StageChangeEventContextMock = StageChangeEventContextMock;
});
define("xrm-mock/events/stageselectedeventarguments/stageselectedeventarguments.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StageSelectedEventArgumentsMock = void 0;
    var StageSelectedEventArgumentsMock = /** @class */ (function () {
        function StageSelectedEventArgumentsMock() {
        }
        StageSelectedEventArgumentsMock.prototype.getStage = function () {
            throw new Error("Not implemented.");
        };
        return StageSelectedEventArgumentsMock;
    }());
    exports.StageSelectedEventArgumentsMock = StageSelectedEventArgumentsMock;
});
define("xrm-mock/events/stageselectedeventcontext/stageselectedeventcontext.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StageSelectedEventContextMock = void 0;
    var StageSelectedEventContextMock = /** @class */ (function () {
        function StageSelectedEventContextMock(eventContext) {
            this.eventContext = eventContext;
        }
        StageSelectedEventContextMock.prototype.getContext = function () {
            return this.eventContext.getContext();
        };
        StageSelectedEventContextMock.prototype.getDepth = function () {
            return this.eventContext.getDepth();
        };
        StageSelectedEventContextMock.prototype.getEventSource = function () {
            return this.eventContext.getEventSource();
        };
        StageSelectedEventContextMock.prototype.getFormContext = function () {
            return this.eventContext.getFormContext();
        };
        StageSelectedEventContextMock.prototype.getSharedVariable = function (key) {
            return this.eventContext.getSharedVariable(key);
        };
        StageSelectedEventContextMock.prototype.setSharedVariable = function (key, value) {
            return this.setSharedVariable(key, value);
        };
        StageSelectedEventContextMock.prototype.getEventArgs = function () {
            throw new Error("Not implemented.");
        };
        return StageSelectedEventContextMock;
    }());
    exports.StageSelectedEventContextMock = StageSelectedEventContextMock;
});
define("xrm-mock/processflow/step/step.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StepMock = void 0;
    var StepMock = /** @class */ (function () {
        function StepMock(name, attribute, required) {
            this.name = name;
            this.attribute = attribute;
            this.required = required;
        }
        StepMock.prototype.getAttribute = function () {
            return this.attribute;
        };
        StepMock.prototype.getName = function () {
            return this.name;
        };
        StepMock.prototype.isRequired = function () {
            return this.required;
        };
        StepMock.prototype.getProgress = function () {
            throw new Error("getProgress not implemented");
        };
        StepMock.prototype.setProgress = function (stepProgress, message) {
            throw new Error("setProgress not implemented");
        };
        return StepMock;
    }());
    exports.StepMock = StepMock;
});
define("xrm-mock/controls/stringcontrol/stringcontrol.mock", ["require", "exports", "xrm-mock/controls/autolookupcontrol/autolookupcontrol.mock"], function (require, exports, autolookupcontrol_mock_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringControlMock = void 0;
    var StringControlMock = /** @class */ (function (_super) {
        __extends(StringControlMock, _super);
        function StringControlMock(components) {
            return _super.call(this, components) || this;
        }
        return StringControlMock;
    }(autolookupcontrol_mock_2.AutoLookupControlMock));
    exports.StringControlMock = StringControlMock;
});
define("xrm-mock/attributes/stringattribute/stringattribute.mock", ["require", "exports", "xrm-mock/attributes/attribute/attribute.mock"], function (require, exports, attribute_mock_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringAttributeMock = void 0;
    var StringAttributeMock = /** @class */ (function (_super) {
        __extends(StringAttributeMock, _super);
        function StringAttributeMock(components) {
            var _this = _super.call(this, StringAttributeMock.defaultComponents(components)) || this;
            _this.format = components.format || "text";
            _this.maxLength = components.maxLength || 100;
            return _this;
        }
        StringAttributeMock.create = function (name, value) {
            return new StringAttributeMock({ name: name, value: value });
        };
        StringAttributeMock.defaultComponents = function (components) {
            components.attributeType = "string";
            return components;
        };
        StringAttributeMock.prototype.getFormat = function () {
            return _super.prototype.getFormat.call(this);
        };
        StringAttributeMock.prototype.getMaxLength = function () {
            return this.maxLength;
        };
        StringAttributeMock.prototype.setValue = function (value) {
            if (value && this.maxLength && value.length > this.maxLength) {
                throw new Error(("value cannot be greater than " + this.maxLength));
            }
            else {
                _super.prototype.setValue.call(this, value);
            }
        };
        return StringAttributeMock;
    }(attribute_mock_5.AttributeMock));
    exports.StringAttributeMock = StringAttributeMock;
});
define("xrm-mock/controls/timelinewall/timelinewall.mock", ["require", "exports", "xrm-mock/controls/control/control.mock"], function (require, exports, control_mock_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimelineWallMock = void 0;
    var TimelineWallMock = /** @class */ (function (_super) {
        __extends(TimelineWallMock, _super);
        function TimelineWallMock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimelineWallMock.prototype.refresh = function () {
            throw new Error("Not implemented.");
        };
        TimelineWallMock.prototype.getDisabled = function () {
            throw new Error("Method not implemented.");
        };
        TimelineWallMock.prototype.setDisabled = function (value) {
            throw new Error("Method not implemented.");
        };
        TimelineWallMock.prototype.setFocus = function () {
            throw new Error("Method not implemented.");
        };
        TimelineWallMock.prototype.setVisible = function (visible) {
            throw new Error("Method not implemented.");
        };
        return TimelineWallMock;
    }(control_mock_3.ControlMock));
    exports.TimelineWallMock = TimelineWallMock;
});
define("xrm-mock/usersettings/usersettings.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserSettingsMock = void 0;
    var UserSettingsMock = /** @class */ (function () {
        function UserSettingsMock(components) {
            this.dateFormattingInfo = components.dateFormattingInfo;
            this.defaultDashboardId = components.defaultDashboardId;
            this.isGuidedHelpEnabled = components.isGuidedHelpEnabled;
            this.isHighContrastEnabled = components.isHighContrastEnabled;
            this.isRTL = components.isRTL;
            this.languageId = components.languageId;
            this.securityRolePrivileges = components.securityRolePrivileges;
            this.securityRoles = components.securityRoles;
            this.transactionCurrencyId = components.transactionCurrencyId;
            this.userId = components.userId;
            this.userName = components.userName;
            this.roles = components.roles;
            this.transactionCurrency = components.transactionCurrency;
        }
        UserSettingsMock.prototype.getTimeZoneOffsetMinutes = function () {
            throw new Error("Not implemented");
        };
        return UserSettingsMock;
    }());
    exports.UserSettingsMock = UserSettingsMock;
});
define("xrm-mock/controls/viewselector/viewselector.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewSelectorMock = void 0;
    var ViewSelectorMock = /** @class */ (function () {
        function ViewSelectorMock(isVisible) {
            this.visible = isVisible;
        }
        ViewSelectorMock.prototype.getCurrentView = function () {
            return this.currentView;
        };
        ViewSelectorMock.prototype.setCurrentView = function (viewSelectorItem) {
            this.currentView = viewSelectorItem;
        };
        ViewSelectorMock.prototype.isVisible = function () {
            return this.visible;
        };
        return ViewSelectorMock;
    }());
    exports.ViewSelectorMock = ViewSelectorMock;
});
define("xrm-mock/controls/viewselectoritem/viewselectoritem.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewSelectorItemMock = void 0;
    var ViewSelectorItemMock = /** @class */ (function () {
        function ViewSelectorItemMock(reference) {
            this.reference = reference;
        }
        ViewSelectorItemMock.prototype.getEntityReference = function () {
            return this.reference;
        };
        return ViewSelectorItemMock;
    }());
    exports.ViewSelectorItemMock = ViewSelectorItemMock;
});
define("xrm-mock/webapi/webapi.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebApiMock = void 0;
    var WebApiMock = /** @class */ (function () {
        function WebApiMock(clientContext, online, offline) {
            this.online = online;
            this.offline = offline;
            this.clientContext = clientContext;
            this.isOffline = clientContext.getClientState() === "Offline";
        }
        WebApiMock.prototype.createRecord = function (entityLogicalName, record) {
            if (this.isOffline) {
                return this.offline.createRecord(entityLogicalName, record);
            }
            else {
                return this.online.createRecord(entityLogicalName, record);
            }
        };
        WebApiMock.prototype.deleteRecord = function (entityLogicalName, id) {
            if (this.isOffline) {
                return this.offline.deleteRecord(entityLogicalName, id);
            }
            else {
                return this.online.deleteRecord(entityLogicalName, id);
            }
        };
        WebApiMock.prototype.retrieveRecord = function (entityLogicalName, id, options) {
            if (this.isOffline) {
                return this.offline.retrieveRecord(entityLogicalName, id, options);
            }
            else {
                return this.online.retrieveRecord(entityLogicalName, id, options);
            }
        };
        WebApiMock.prototype.retrieveMultipleRecords = function (entityLogicalName, options, maxPageSize) {
            if (this.isOffline) {
                return this.offline.retrieveMultipleRecords(entityLogicalName, options, maxPageSize);
            }
            else {
                return this.online.retrieveMultipleRecords(entityLogicalName, options, maxPageSize);
            }
        };
        WebApiMock.prototype.updateRecord = function (entityLogicalName, id, data) {
            if (this.isOffline) {
                return this.offline.updateRecord(entityLogicalName, id, data);
            }
            else {
                return this.online.updateRecord(entityLogicalName, id, data);
            }
        };
        WebApiMock.prototype.isAvailableOffline = function (entityLogicalName) {
            throw new Error("xrm-mock doesn\'t yet implement metadata features.");
        };
        return WebApiMock;
    }());
    exports.WebApiMock = WebApiMock;
});
define("xrm-mock/webapioffline/webapioffline.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebApiOfflineMock = void 0;
    var WebApiOfflineMock = /** @class */ (function () {
        function WebApiOfflineMock() {
            this.notImplementedError = "WebApi methods not implemented. Consider faking API calls using a tool such as Sinon.JS";
        }
        WebApiOfflineMock.prototype.createRecord = function (entityLogicalName, record) {
            throw new Error(this.notImplementedError);
        };
        WebApiOfflineMock.prototype.deleteRecord = function (entityLogicalName, id) {
            throw new Error(this.notImplementedError);
        };
        WebApiOfflineMock.prototype.retrieveRecord = function (entityLogicalName, id, options) {
            throw new Error(this.notImplementedError);
        };
        WebApiOfflineMock.prototype.retrieveMultipleRecords = function (entityLogicalName, options, maxPageSize) {
            throw new Error(this.notImplementedError);
        };
        WebApiOfflineMock.prototype.updateRecord = function (entityLogicalName, id, data) {
            throw new Error(this.notImplementedError);
        };
        return WebApiOfflineMock;
    }());
    exports.WebApiOfflineMock = WebApiOfflineMock;
});
define("xrm-mock/webapionline/webapionline.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebApiOnlineMock = void 0;
    var WebApiOnlineMock = /** @class */ (function () {
        function WebApiOnlineMock(offlineCapabilities) {
            this.notImplementedError = "WebApi methods not implemented. Consider faking API calls using a tool such as Sinon.JS";
            this.offline = offlineCapabilities;
        }
        WebApiOnlineMock.prototype.execute = function (request) {
            throw new Error(this.notImplementedError);
        };
        WebApiOnlineMock.prototype.executeMultiple = function (request) {
            throw new Error(this.notImplementedError);
        };
        WebApiOnlineMock.prototype.createRecord = function (entityLogicalName, record) {
            return this.offline.createRecord(entityLogicalName, record);
        };
        WebApiOnlineMock.prototype.deleteRecord = function (entityLogicalName, id) {
            return this.offline.deleteRecord(entityLogicalName, id);
        };
        WebApiOnlineMock.prototype.retrieveRecord = function (entityLogicalName, id, options) {
            return this.offline.retrieveRecord(entityLogicalName, id, options);
        };
        WebApiOnlineMock.prototype.retrieveMultipleRecords = function (entityLogicalName, options, maxPageSize) {
            return this.offline.retrieveMultipleRecords(entityLogicalName, options, maxPageSize);
        };
        WebApiOnlineMock.prototype.updateRecord = function (entityLogicalName, id, data) {
            return this.offline.updateRecord(entityLogicalName, id, data);
        };
        return WebApiOnlineMock;
    }());
    exports.WebApiOnlineMock = WebApiOnlineMock;
});
define("xrm-mock/xrmstatic.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrmStaticMock = void 0;
    var XrmStaticMock = /** @class */ (function () {
        function XrmStaticMock(components) {
            this.Device = components.device;
            this.Encoding = components.encoding;
            this.Mobile = components.mobile;
            this.Navigation = components.navigation;
            this.Page = components.page;
            this.Panel = components.panel;
            this.Utility = components.utility;
            this.WebApi = components.webApi;
            this.App = components.app;
        }
        return XrmStaticMock;
    }());
    exports.XrmStaticMock = XrmStaticMock;
});
define("xrm-mock/window.mock", ["require", "exports", "xrm-mock-generator/xrm-mock-generator"], function (require, exports, xrm_mock_generator_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WindowMock = void 0;
    var WindowMock = /** @class */ (function () {
        function WindowMock(xrm) {
            this.Xrm = xrm;
        }
        WindowMock.prototype.GetGlobalContext = function () {
            return xrm_mock_generator_5.XrmMockGenerator.context;
        };
        return WindowMock;
    }());
    exports.WindowMock = WindowMock;
});
define("xrm-mock/controls/iframecontrol/iframecontrol.mock", ["require", "exports", "xrm-mock/controls/control/control.mock"], function (require, exports, control_mock_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IframeControlMock = void 0;
    var IframeControlMock = /** @class */ (function (_super) {
        __extends(IframeControlMock, _super);
        function IframeControlMock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IframeControlMock.prototype.setVisible = function (visible) {
            throw new Error("setVisible not implemented.");
        };
        IframeControlMock.prototype.getObject = function () {
            throw new Error("getObject not implemented.");
        };
        IframeControlMock.prototype.getContentWindow = function () {
            throw new Error("getContentWindow not implemented.");
        };
        IframeControlMock.prototype.getSrc = function () {
            throw new Error("getSrc not implemented.");
        };
        IframeControlMock.prototype.setSrc = function (src) {
            throw new Error("setSrc not implemented.");
        };
        IframeControlMock.prototype.getInitialUrl = function () {
            throw new Error("getInitialUrl not implemented.");
        };
        IframeControlMock.prototype.getDisabled = function () {
            throw new Error("getDisabled not implemented.");
        };
        IframeControlMock.prototype.setDisabled = function (value) {
            throw new Error("setDisabled not implemented.");
        };
        IframeControlMock.prototype.setFocus = function () {
            throw new Error("setFocus not implemented.");
        };
        return IframeControlMock;
    }(control_mock_4.ControlMock));
    exports.IframeControlMock = IframeControlMock;
});
define("xrm-mock/controls/quickform/quickform.mock", ["require", "exports", "xrm-mock/controls/control/control.mock"], function (require, exports, control_mock_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuickFormControlMock = void 0;
    var QuickFormControlMock = /** @class */ (function (_super) {
        __extends(QuickFormControlMock, _super);
        function QuickFormControlMock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QuickFormControlMock.prototype.getControlType = function () {
            return "quickform";
        };
        QuickFormControlMock.prototype.getControl = function () {
            throw new Error("Method not implemented.");
        };
        QuickFormControlMock.prototype.isLoaded = function () {
            throw new Error("Method not implemented.");
        };
        QuickFormControlMock.prototype.refresh = function () {
            throw new Error("Method not implemented.");
        };
        QuickFormControlMock.prototype.setFocus = function () {
            throw new Error("Method not implemented.");
        };
        QuickFormControlMock.prototype.getDisabled = function () {
            throw new Error("Method not implemented.");
        };
        QuickFormControlMock.prototype.setDisabled = function (disabled) {
            throw new Error("Method not implemented.");
        };
        QuickFormControlMock.prototype.setVisible = function (visible) {
            throw new Error("Method not implemented.");
        };
        return QuickFormControlMock;
    }(control_mock_5.ControlMock));
    exports.QuickFormControlMock = QuickFormControlMock;
});
define("xrm-mock/controls/kbsearchcontrol/kbsearchcontrol.mock", ["require", "exports", "xrm-mock/controls/control/control.mock"], function (require, exports, control_mock_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KbSearchControlMock = void 0;
    var KbSearchControlMock = /** @class */ (function (_super) {
        __extends(KbSearchControlMock, _super);
        function KbSearchControlMock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        KbSearchControlMock.prototype.addOnPostSearch = function (handler) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.addOnResultOpened = function (handler) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.addOnSelection = function (handler) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.getDisabled = function () {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.getSearchQuery = function () {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.getSelectedResults = function () {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.getTotalResultCount = function () {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.openSearchResult = function (resultNumber, mode) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.removeOnPostSearch = function (handler) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.removeOnResultOpened = function (handler) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.removeOnSelection = function (handler) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.setFocus = function () {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.setSearchQuery = function (searchString) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.setVisible = function (visible) {
            throw new Error("Method not implemented.");
        };
        KbSearchControlMock.prototype.setDisabled = function (value) {
            throw new Error("Method not implemented.");
        };
        return KbSearchControlMock;
    }(control_mock_6.ControlMock));
    exports.KbSearchControlMock = KbSearchControlMock;
});
define("xrm-mock/controls/timercontrol/timercontrol.mock", ["require", "exports", "xrm-mock/controls/control/control.mock"], function (require, exports, control_mock_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimerControlMock = void 0;
    var TimerControlMock = /** @class */ (function (_super) {
        __extends(TimerControlMock, _super);
        function TimerControlMock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimerControlMock.prototype.getState = function () {
            throw new Error("Method not implemented.");
        };
        TimerControlMock.prototype.refresh = function () {
            throw new Error("Not implemented.");
        };
        TimerControlMock.prototype.getDisabled = function () {
            throw new Error("Method not implemented.");
        };
        TimerControlMock.prototype.setDisabled = function (value) {
            throw new Error("Method not implemented.");
        };
        TimerControlMock.prototype.setFocus = function () {
            throw new Error("Method not implemented.");
        };
        TimerControlMock.prototype.setVisible = function (visible) {
            throw new Error("Method not implemented.");
        };
        return TimerControlMock;
    }(control_mock_7.ControlMock));
    exports.TimerControlMock = TimerControlMock;
});
define("xrm-mock/index", ["require", "exports", "xrm-mock/controls/addcontrolnotificationoptions/addcontrolnotificationoptions.mock", "xrm-mock/navigation/alertstrings/alertstrings.mock", "xrm-mock/appproperties/appproperties.mock", "xrm-mock/metadata/attributemetadata/attributemetadata.mock", "xrm-mock/attributes/attribute/attribute.mock", "xrm-mock/controls/autocompletecommand/autocompletecommand.mock", "xrm-mock/controls/autocompleteresult/autocompleteresult.mock", "xrm-mock/controls/autocompleteresultset/autocompleteresultset.mock", "xrm-mock/controls/autolookupcontrol/autolookupcontrol.mock", "xrm-mock/attributes/booleanattribute/booleanattribute.mock", "xrm-mock/controls/booleancontrol/booleancontrol.mock", "xrm-mock/calendar/calendar.mock", "xrm-mock/device/capturefileresponse/capturefileresponse.mock", "xrm-mock/device/captureimageoptions/captureimageoptions.mock", "xrm-mock/clientcontext/clientcontext.mock", "xrm-mock/navigation/confirmresult/confirmresult.mock", "xrm-mock/navigation/confirmstrings/confirmstrings.mock", "xrm-mock/globalcontext/context.mock", "xrm-mock/controls/control/control.mock", "xrm-mock/controls/controlnotificationaction/controlnotificationaction.mock", "xrm-mock/data/data.mock", "xrm-mock/attributes/dateattribute/dateattribute.mock", "xrm-mock/controls/datecontrol/datecontrol.mock", "xrm-mock/dateformattinginfo/dateformattinginfo.mock", "xrm-mock/device/device.mock", "xrm-mock/navigation/dialogsizeoptions/dialogsizeoptions.mock", "xrm-mock/encoding/encoding.mock", "xrm-mock/navigation/entityformoptions/entityformoptions.mock", "xrm-mock/metadata/entitymetadata/entitymetadata.mock", "xrm-mock/entity/entity.mock", "xrm-mock/attributes/enumattribute/enumattribute.mock", "xrm-mock/navigation/errordialogoptions/errordialogoptions.mock", "xrm-mock/errorresponse/errorresponse.mock", "xrm-mock/events/eventcontext/eventcontext.mock", "xrm-mock/executeresponse/executeresponse.mock", "xrm-mock/navigation/filedetails/filedetails.mock", "xrm-mock/formcontext/formcontext.mock", "xrm-mock/controls/formitem/formitem.mock", "xrm-mock/utility/formopenparameters/formopenparameters.mock", "xrm-mock/controls/formselector/formselector.mock", "xrm-mock/device/getcurrentpositionresponse/getcurrentpositionresponse.mock", "xrm-mock/controls/gridcontrol/gridcontrol.mock", "xrm-mock/controls/grid/gridentity/gridentity.mock", "xrm-mock/controls/grid/grid.mock", "xrm-mock/controls/grid/gridrow/gridrow.mock", "xrm-mock/controls/grid/gridrowdata/gridrowdata.mock", "xrm-mock/collection/itemcollection/itemcollection.mock", "xrm-mock/metadata/label/label.mock", "xrm-mock/metadata/localizedlabel/localizedlabel.mock", "xrm-mock/attributes/lookupattribute/lookupattribute.mock", "xrm-mock/controls/lookupcontrol/lookupcontrol.mock", "xrm-mock/lookupoptions/lookupoptions.mock", "xrm-mock/lookupvalue/lookupvalue.mock", "xrm-mock/controls/navigation/navigation.mock", "xrm-mock/controls/navigationitem/navigationitem.mock", "xrm-mock/navigation/navigation.mock", "xrm-mock/attributes/numberattribute/numberattribute.mock", "xrm-mock/controls/numbercontrol/numbercontrol.mock", "xrm-mock/utility/openparameters/openparameters.mock", "xrm-mock/navigation/openwebresourceoptions/openwebresourceoptions.mock", "xrm-mock/attributes/optionsetattribute/optionsetattribute.mock", "xrm-mock/controls/optionsetcontrol/optionsetcontrol.mock", "xrm-mock/metadata/optionmetadata/optionmetadata.mock", "xrm-mock/optionsetvalue/optionsetvalue.mock", "xrm-mock/organizationsettings/organizationsettings.mock", "xrm-mock/page/page.mock", "xrm-mock/panel/panel.mock", "xrm-mock/device/pickfileoptions/pickfileoptions.mock", "xrm-mock/privilege/privilege.mock", "xrm-mock/controls/processcontrol/processcontrol.mock", "xrm-mock/processflow/processdictionary/processdictionary.mock", "xrm-mock/processflow/processmanager/processmanager.mock", "xrm-mock/processflow/process/process.mock", "xrm-mock/navigation/relationship/relationship.mock", "xrm-mock/url/reportopenparameters/reportopenparameters.mock", "xrm-mock/retrievemultiplerequest/retrievemultiplerequest.mock", "xrm-mock/events/saveeventarguments/saveeventarguments.mock", "xrm-mock/events/saveeventcontext/saveeventcontext.mock", "xrm-mock/saveoptions/saveoptions.mock", "xrm-mock/controls/section/section.mock", "xrm-mock/events/stagechangeeventarguments/stagechangeeventarguments.mock", "xrm-mock/events/stagechangeeventcontext/stagechangeeventcontext.mock", "xrm-mock/processflow/stage/stage.mock", "xrm-mock/events/stageselectedeventarguments/stageselectedeventarguments.mock", "xrm-mock/events/stageselectedeventcontext/stageselectedeventcontext.mock", "xrm-mock/controls/standardcontrol/standardcontrol.mock", "xrm-mock/processflow/step/step.mock", "xrm-mock/attributes/stringattribute/stringattribute.mock", "xrm-mock/controls/stringcontrol/stringcontrol.mock", "xrm-mock/controls/tab/tab.mock", "xrm-mock/controls/timelinewall/timelinewall.mock", "xrm-mock/controls/uicangetvisibleelement/uicangetvisibleelement.mock", "xrm-mock/controls/uifocusable/uifocusable.mock", "xrm-mock/controls/uikeypressable/uikeypressable.mock", "xrm-mock/controls/uilabelelement/uilabelelement.mock", "xrm-mock/ui/ui.mock", "xrm-mock/controls/uistandardelement/uistandardelement.mock", "xrm-mock/usersettings/usersettings.mock", "xrm-mock/utility/utility.mock", "xrm-mock/controls/viewselector/viewselector.mock", "xrm-mock/controls/viewselectoritem/viewselectoritem.mock", "xrm-mock/webapi/webapi.mock", "xrm-mock/webapioffline/webapioffline.mock", "xrm-mock/webapionline/webapionline.mock", "xrm-mock/window.mock", "xrm-mock/xrmstatic.mock", "xrm-mock/controls/iframecontrol/iframecontrol.mock", "xrm-mock/controls/quickform/quickform.mock", "xrm-mock/app/app.mock", "xrm-mock/controls/kbsearchcontrol/kbsearchcontrol.mock", "xrm-mock/controls/timercontrol/timercontrol.mock"], function (require, exports, addcontrolnotificationoptions_mock_1, alertstrings_mock_1, appproperties_mock_1, attributemetadata_mock_1, attribute_mock_6, autocompletecommand_mock_1, autocompleteresult_mock_1, autocompleteresultset_mock_1, autolookupcontrol_mock_3, booleanattribute_mock_1, booleancontrol_mock_1, calendar_mock_1, capturefileresponse_mock_1, captureimageoptions_mock_1, clientcontext_mock_1, confirmresult_mock_1, confirmstrings_mock_1, context_mock_1, control_mock_8, controlnotificationaction_mock_1, data_mock_1, dateattribute_mock_1, datecontrol_mock_1, dateformattinginfo_mock_1, device_mock_2, dialogsizeoptions_mock_2, encoding_mock_1, entityformoptions_mock_1, entitymetadata_mock_1, entity_mock_1, enumattribute_mock_3, errordialogoptions_mock_1, errorresponse_mock_1, eventcontext_mock_2, executeresponse_mock_1, filedetails_mock_1, formcontext_mock_1, formitem_mock_1, formopenparameters_mock_1, formselector_mock_1, getcurrentpositionresponse_mock_1, gridcontrol_mock_1, gridentity_mock_1, grid_mock_1, gridrow_mock_1, gridrowdata_mock_1, itemcollection_mock_7, label_mock_1, localizedlabel_mock_1, lookupattribute_mock_1, lookupcontrol_mock_1, lookupoptions_mock_1, lookupvalue_mock_1, navigation_mock_1, navigationitem_mock_1, navigation_mock_2, numberattribute_mock_1, numbercontrol_mock_1, openparameters_mock_1, openwebresourceoptions_mock_1, optionsetattribute_mock_1, optionsetcontrol_mock_1, optionmetadata_mock_1, optionsetvalue_mock_2, organizationsettings_mock_1, page_mock_1, panel_mock_1, pickfileoptions_mock_1, privilege_mock_1, processcontrol_mock_1, processdictionary_mock_1, processmanager_mock_1, process_mock_1, relationship_mock_1, reportopenparameters_mock_1, retrievemultiplerequest_mock_1, saveeventarguments_mock_1, saveeventcontext_mock_1, saveoptions_mock_1, section_mock_1, stagechangeeventarguments_mock_1, stagechangeeventcontext_mock_1, stage_mock_1, stageselectedeventarguments_mock_1, stageselectedeventcontext_mock_1, standardcontrol_mock_6, step_mock_1, stringattribute_mock_1, stringcontrol_mock_1, tab_mock_1, timelinewall_mock_1, uicangetvisibleelement_mock_6, uifocusable_mock_3, uikeypressable_mock_2, uilabelelement_mock_6, ui_mock_1, uistandardelement_mock_6, usersettings_mock_1, utility_mock_2, viewselector_mock_1, viewselectoritem_mock_1, webapi_mock_1, webapioffline_mock_1, webapionline_mock_1, window_mock_1, xrmstatic_mock_1, iframecontrol_mock_1, quickform_mock_1, app_mock_2, kbsearchcontrol_mock_1, timercontrol_mock_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimerControlMock = exports.KbSearchControlMock = exports.AppMock = exports.QuickFormControlMock = exports.IframeControlMock = exports.XrmStaticMock = exports.WindowMock = exports.WebApiOnlineMock = exports.WebApiOfflineMock = exports.WebApiMock = exports.ViewSelectorItemMock = exports.ViewSelectorMock = exports.UtilityMock = exports.UserSettingsMock = exports.UiStandardElementMock = exports.UiMock = exports.UiLabelElementMock = exports.UiKeyPressableMock = exports.UiFocusableMock = exports.UiCanGetVisibleElementMock = exports.TimelineWallMock = exports.TabMock = exports.StringControlMock = exports.StringAttributeMock = exports.StepMock = exports.StandardControlMock = exports.StageSelectedEventContextMock = exports.StageSelectedEventArgumentsMock = exports.StageMock = exports.StageChangeEventContextMock = exports.StageChangeEventArgumentsMock = exports.SectionMock = exports.SaveOptionsMock = exports.SaveEventContextMock = exports.SaveEventArgumentsMock = exports.RetrieveMultipleRequestMock = exports.ReportOpenParametersMock = exports.RelationshipMock = exports.ProcessMock = exports.ProcessManagerMock = exports.ProcessDictionaryMock = exports.ProcessControlMock = exports.PrivilegeMock = exports.PickFileOptionsMock = exports.PanelMock = exports.PageMock = exports.OrganizationSettingsMock = exports.OptionSetValueMock = exports.OptionMetadataMock = exports.OptionSetControlMock = exports.OptionSetAttributeMock = exports.OpenWebresourceOptionsMock = exports.OpenParametersMock = exports.NumberControlMock = exports.NumberAttributeMock = exports.NavigationStaticMock = exports.NavigationItemMock = exports.NavigationMock = exports.LookupValueMock = exports.LookupOptionsMock = exports.LookupControlMock = exports.LookupAttributeMock = exports.LocalizedLabelMock = exports.LabelMock = exports.ItemCollectionMock = exports.GridRowDataMock = exports.GridRowMock = exports.GridMock = exports.GridEntityMock = exports.GridControlMock = exports.GetCurrentPositionResponseMock = exports.FormSelectorMock = exports.FormOpenParametersMock = exports.FormItemMock = exports.FormContextMock = exports.FileDetailsMock = exports.ExecuteResponseMock = exports.EventContextMock = exports.ErrorResponseMock = exports.ErrorDialogOptionsMock = exports.EnumAttributeMock = exports.EntityMock = exports.EntityMetadataMock = exports.EntityFormOptionsMock = exports.EncodingMock = exports.DialogSizeOptionsMock = exports.DeviceMock = exports.DateFormattingInfoMock = exports.DateControlMock = exports.DateAttributeMock = exports.DataMock = exports.ControlNotificationActionMock = exports.ControlMock = exports.ContextMock = exports.ConfirmStringsMock = exports.ConfirmResultMock = exports.ClientContextMock = exports.CaptureImageOptionsMock = exports.CaptureFileResponseMock = exports.CalendarMock = exports.BooleanControlMock = exports.BooleanAttributeMock = exports.AutoLookupControlMock = exports.AutoCompleteResultSetMock = exports.AutoCompleteResultMock = exports.AutoCompleteCommandMock = exports.AttributeMock = exports.AttributeMetadataMock = exports.AppPropertiesMock = exports.AlertStringsMock = exports.AddControlNotificationOptionsMock = void 0;
    Object.defineProperty(exports, "AddControlNotificationOptionsMock", { enumerable: true, get: function () { return addcontrolnotificationoptions_mock_1.AddControlNotificationOptionsMock; } });
    Object.defineProperty(exports, "AlertStringsMock", { enumerable: true, get: function () { return alertstrings_mock_1.AlertStringsMock; } });
    Object.defineProperty(exports, "AppPropertiesMock", { enumerable: true, get: function () { return appproperties_mock_1.AppPropertiesMock; } });
    Object.defineProperty(exports, "AttributeMetadataMock", { enumerable: true, get: function () { return attributemetadata_mock_1.AttributeMetadataMock; } });
    Object.defineProperty(exports, "AttributeMock", { enumerable: true, get: function () { return attribute_mock_6.AttributeMock; } });
    Object.defineProperty(exports, "AutoCompleteCommandMock", { enumerable: true, get: function () { return autocompletecommand_mock_1.AutoCompleteCommandMock; } });
    Object.defineProperty(exports, "AutoCompleteResultMock", { enumerable: true, get: function () { return autocompleteresult_mock_1.AutoCompleteResultMock; } });
    Object.defineProperty(exports, "AutoCompleteResultSetMock", { enumerable: true, get: function () { return autocompleteresultset_mock_1.AutoCompleteResultSetMock; } });
    Object.defineProperty(exports, "AutoLookupControlMock", { enumerable: true, get: function () { return autolookupcontrol_mock_3.AutoLookupControlMock; } });
    Object.defineProperty(exports, "BooleanAttributeMock", { enumerable: true, get: function () { return booleanattribute_mock_1.BooleanAttributeMock; } });
    Object.defineProperty(exports, "BooleanControlMock", { enumerable: true, get: function () { return booleancontrol_mock_1.BooleanControlMock; } });
    Object.defineProperty(exports, "CalendarMock", { enumerable: true, get: function () { return calendar_mock_1.CalendarMock; } });
    Object.defineProperty(exports, "CaptureFileResponseMock", { enumerable: true, get: function () { return capturefileresponse_mock_1.CaptureFileResponseMock; } });
    Object.defineProperty(exports, "CaptureImageOptionsMock", { enumerable: true, get: function () { return captureimageoptions_mock_1.CaptureImageOptionsMock; } });
    Object.defineProperty(exports, "ClientContextMock", { enumerable: true, get: function () { return clientcontext_mock_1.ClientContextMock; } });
    Object.defineProperty(exports, "ConfirmResultMock", { enumerable: true, get: function () { return confirmresult_mock_1.ConfirmResultMock; } });
    Object.defineProperty(exports, "ConfirmStringsMock", { enumerable: true, get: function () { return confirmstrings_mock_1.ConfirmStringsMock; } });
    Object.defineProperty(exports, "ContextMock", { enumerable: true, get: function () { return context_mock_1.ContextMock; } });
    Object.defineProperty(exports, "ControlMock", { enumerable: true, get: function () { return control_mock_8.ControlMock; } });
    Object.defineProperty(exports, "ControlNotificationActionMock", { enumerable: true, get: function () { return controlnotificationaction_mock_1.ControlNotificationActionMock; } });
    Object.defineProperty(exports, "DataMock", { enumerable: true, get: function () { return data_mock_1.DataMock; } });
    Object.defineProperty(exports, "DateAttributeMock", { enumerable: true, get: function () { return dateattribute_mock_1.DateAttributeMock; } });
    Object.defineProperty(exports, "DateControlMock", { enumerable: true, get: function () { return datecontrol_mock_1.DateControlMock; } });
    Object.defineProperty(exports, "DateFormattingInfoMock", { enumerable: true, get: function () { return dateformattinginfo_mock_1.DateFormattingInfoMock; } });
    Object.defineProperty(exports, "DeviceMock", { enumerable: true, get: function () { return device_mock_2.DeviceMock; } });
    Object.defineProperty(exports, "DialogSizeOptionsMock", { enumerable: true, get: function () { return dialogsizeoptions_mock_2.DialogSizeOptionsMock; } });
    Object.defineProperty(exports, "EncodingMock", { enumerable: true, get: function () { return encoding_mock_1.EncodingMock; } });
    Object.defineProperty(exports, "EntityFormOptionsMock", { enumerable: true, get: function () { return entityformoptions_mock_1.EntityFormOptionsMock; } });
    Object.defineProperty(exports, "EntityMetadataMock", { enumerable: true, get: function () { return entitymetadata_mock_1.EntityMetadataMock; } });
    Object.defineProperty(exports, "EntityMock", { enumerable: true, get: function () { return entity_mock_1.EntityMock; } });
    Object.defineProperty(exports, "EnumAttributeMock", { enumerable: true, get: function () { return enumattribute_mock_3.EnumAttributeMock; } });
    Object.defineProperty(exports, "ErrorDialogOptionsMock", { enumerable: true, get: function () { return errordialogoptions_mock_1.ErrorDialogOptionsMock; } });
    Object.defineProperty(exports, "ErrorResponseMock", { enumerable: true, get: function () { return errorresponse_mock_1.ErrorResponseMock; } });
    Object.defineProperty(exports, "EventContextMock", { enumerable: true, get: function () { return eventcontext_mock_2.EventContextMock; } });
    Object.defineProperty(exports, "ExecuteResponseMock", { enumerable: true, get: function () { return executeresponse_mock_1.ExecuteResponseMock; } });
    Object.defineProperty(exports, "FileDetailsMock", { enumerable: true, get: function () { return filedetails_mock_1.FileDetailsMock; } });
    Object.defineProperty(exports, "FormContextMock", { enumerable: true, get: function () { return formcontext_mock_1.FormContextMock; } });
    Object.defineProperty(exports, "FormItemMock", { enumerable: true, get: function () { return formitem_mock_1.FormItemMock; } });
    Object.defineProperty(exports, "FormOpenParametersMock", { enumerable: true, get: function () { return formopenparameters_mock_1.FormOpenParametersMock; } });
    Object.defineProperty(exports, "FormSelectorMock", { enumerable: true, get: function () { return formselector_mock_1.FormSelectorMock; } });
    Object.defineProperty(exports, "GetCurrentPositionResponseMock", { enumerable: true, get: function () { return getcurrentpositionresponse_mock_1.GetCurrentPositionResponseMock; } });
    Object.defineProperty(exports, "GridControlMock", { enumerable: true, get: function () { return gridcontrol_mock_1.GridControlMock; } });
    Object.defineProperty(exports, "GridEntityMock", { enumerable: true, get: function () { return gridentity_mock_1.GridEntityMock; } });
    Object.defineProperty(exports, "GridMock", { enumerable: true, get: function () { return grid_mock_1.GridMock; } });
    Object.defineProperty(exports, "GridRowMock", { enumerable: true, get: function () { return gridrow_mock_1.GridRowMock; } });
    Object.defineProperty(exports, "GridRowDataMock", { enumerable: true, get: function () { return gridrowdata_mock_1.GridRowDataMock; } });
    Object.defineProperty(exports, "ItemCollectionMock", { enumerable: true, get: function () { return itemcollection_mock_7.ItemCollectionMock; } });
    Object.defineProperty(exports, "LabelMock", { enumerable: true, get: function () { return label_mock_1.LabelMock; } });
    Object.defineProperty(exports, "LocalizedLabelMock", { enumerable: true, get: function () { return localizedlabel_mock_1.LocalizedLabelMock; } });
    Object.defineProperty(exports, "LookupAttributeMock", { enumerable: true, get: function () { return lookupattribute_mock_1.LookupAttributeMock; } });
    Object.defineProperty(exports, "LookupControlMock", { enumerable: true, get: function () { return lookupcontrol_mock_1.LookupControlMock; } });
    Object.defineProperty(exports, "LookupOptionsMock", { enumerable: true, get: function () { return lookupoptions_mock_1.LookupOptionsMock; } });
    Object.defineProperty(exports, "LookupValueMock", { enumerable: true, get: function () { return lookupvalue_mock_1.LookupValueMock; } });
    Object.defineProperty(exports, "NavigationMock", { enumerable: true, get: function () { return navigation_mock_1.NavigationMock; } });
    Object.defineProperty(exports, "NavigationItemMock", { enumerable: true, get: function () { return navigationitem_mock_1.NavigationItemMock; } });
    Object.defineProperty(exports, "NavigationStaticMock", { enumerable: true, get: function () { return navigation_mock_2.NavigationStaticMock; } });
    Object.defineProperty(exports, "NumberAttributeMock", { enumerable: true, get: function () { return numberattribute_mock_1.NumberAttributeMock; } });
    Object.defineProperty(exports, "NumberControlMock", { enumerable: true, get: function () { return numbercontrol_mock_1.NumberControlMock; } });
    Object.defineProperty(exports, "OpenParametersMock", { enumerable: true, get: function () { return openparameters_mock_1.OpenParametersMock; } });
    Object.defineProperty(exports, "OpenWebresourceOptionsMock", { enumerable: true, get: function () { return openwebresourceoptions_mock_1.OpenWebresourceOptionsMock; } });
    Object.defineProperty(exports, "OptionSetAttributeMock", { enumerable: true, get: function () { return optionsetattribute_mock_1.OptionSetAttributeMock; } });
    Object.defineProperty(exports, "OptionSetControlMock", { enumerable: true, get: function () { return optionsetcontrol_mock_1.OptionSetControlMock; } });
    Object.defineProperty(exports, "OptionMetadataMock", { enumerable: true, get: function () { return optionmetadata_mock_1.OptionMetadataMock; } });
    Object.defineProperty(exports, "OptionSetValueMock", { enumerable: true, get: function () { return optionsetvalue_mock_2.OptionSetValueMock; } });
    Object.defineProperty(exports, "OrganizationSettingsMock", { enumerable: true, get: function () { return organizationsettings_mock_1.OrganizationSettingsMock; } });
    Object.defineProperty(exports, "PageMock", { enumerable: true, get: function () { return page_mock_1.PageMock; } });
    Object.defineProperty(exports, "PanelMock", { enumerable: true, get: function () { return panel_mock_1.PanelMock; } });
    Object.defineProperty(exports, "PickFileOptionsMock", { enumerable: true, get: function () { return pickfileoptions_mock_1.PickFileOptionsMock; } });
    Object.defineProperty(exports, "PrivilegeMock", { enumerable: true, get: function () { return privilege_mock_1.PrivilegeMock; } });
    Object.defineProperty(exports, "ProcessControlMock", { enumerable: true, get: function () { return processcontrol_mock_1.ProcessControlMock; } });
    Object.defineProperty(exports, "ProcessDictionaryMock", { enumerable: true, get: function () { return processdictionary_mock_1.ProcessDictionaryMock; } });
    Object.defineProperty(exports, "ProcessManagerMock", { enumerable: true, get: function () { return processmanager_mock_1.ProcessManagerMock; } });
    Object.defineProperty(exports, "ProcessMock", { enumerable: true, get: function () { return process_mock_1.ProcessMock; } });
    Object.defineProperty(exports, "RelationshipMock", { enumerable: true, get: function () { return relationship_mock_1.RelationshipMock; } });
    Object.defineProperty(exports, "ReportOpenParametersMock", { enumerable: true, get: function () { return reportopenparameters_mock_1.ReportOpenParametersMock; } });
    Object.defineProperty(exports, "RetrieveMultipleRequestMock", { enumerable: true, get: function () { return retrievemultiplerequest_mock_1.RetrieveMultipleRequestMock; } });
    Object.defineProperty(exports, "SaveEventArgumentsMock", { enumerable: true, get: function () { return saveeventarguments_mock_1.SaveEventArgumentsMock; } });
    Object.defineProperty(exports, "SaveEventContextMock", { enumerable: true, get: function () { return saveeventcontext_mock_1.SaveEventContextMock; } });
    Object.defineProperty(exports, "SaveOptionsMock", { enumerable: true, get: function () { return saveoptions_mock_1.SaveOptionsMock; } });
    Object.defineProperty(exports, "SectionMock", { enumerable: true, get: function () { return section_mock_1.SectionMock; } });
    Object.defineProperty(exports, "StageChangeEventArgumentsMock", { enumerable: true, get: function () { return stagechangeeventarguments_mock_1.StageChangeEventArgumentsMock; } });
    Object.defineProperty(exports, "StageChangeEventContextMock", { enumerable: true, get: function () { return stagechangeeventcontext_mock_1.StageChangeEventContextMock; } });
    Object.defineProperty(exports, "StageMock", { enumerable: true, get: function () { return stage_mock_1.StageMock; } });
    Object.defineProperty(exports, "StageSelectedEventArgumentsMock", { enumerable: true, get: function () { return stageselectedeventarguments_mock_1.StageSelectedEventArgumentsMock; } });
    Object.defineProperty(exports, "StageSelectedEventContextMock", { enumerable: true, get: function () { return stageselectedeventcontext_mock_1.StageSelectedEventContextMock; } });
    Object.defineProperty(exports, "StandardControlMock", { enumerable: true, get: function () { return standardcontrol_mock_6.StandardControlMock; } });
    Object.defineProperty(exports, "StepMock", { enumerable: true, get: function () { return step_mock_1.StepMock; } });
    Object.defineProperty(exports, "StringAttributeMock", { enumerable: true, get: function () { return stringattribute_mock_1.StringAttributeMock; } });
    Object.defineProperty(exports, "StringControlMock", { enumerable: true, get: function () { return stringcontrol_mock_1.StringControlMock; } });
    Object.defineProperty(exports, "TabMock", { enumerable: true, get: function () { return tab_mock_1.TabMock; } });
    Object.defineProperty(exports, "TimelineWallMock", { enumerable: true, get: function () { return timelinewall_mock_1.TimelineWallMock; } });
    Object.defineProperty(exports, "UiCanGetVisibleElementMock", { enumerable: true, get: function () { return uicangetvisibleelement_mock_6.UiCanGetVisibleElementMock; } });
    Object.defineProperty(exports, "UiFocusableMock", { enumerable: true, get: function () { return uifocusable_mock_3.UiFocusableMock; } });
    Object.defineProperty(exports, "UiKeyPressableMock", { enumerable: true, get: function () { return uikeypressable_mock_2.UiKeyPressableMock; } });
    Object.defineProperty(exports, "UiLabelElementMock", { enumerable: true, get: function () { return uilabelelement_mock_6.UiLabelElementMock; } });
    Object.defineProperty(exports, "UiMock", { enumerable: true, get: function () { return ui_mock_1.UiMock; } });
    Object.defineProperty(exports, "UiStandardElementMock", { enumerable: true, get: function () { return uistandardelement_mock_6.UiStandardElementMock; } });
    Object.defineProperty(exports, "UserSettingsMock", { enumerable: true, get: function () { return usersettings_mock_1.UserSettingsMock; } });
    Object.defineProperty(exports, "UtilityMock", { enumerable: true, get: function () { return utility_mock_2.UtilityMock; } });
    Object.defineProperty(exports, "ViewSelectorMock", { enumerable: true, get: function () { return viewselector_mock_1.ViewSelectorMock; } });
    Object.defineProperty(exports, "ViewSelectorItemMock", { enumerable: true, get: function () { return viewselectoritem_mock_1.ViewSelectorItemMock; } });
    Object.defineProperty(exports, "WebApiMock", { enumerable: true, get: function () { return webapi_mock_1.WebApiMock; } });
    Object.defineProperty(exports, "WebApiOfflineMock", { enumerable: true, get: function () { return webapioffline_mock_1.WebApiOfflineMock; } });
    Object.defineProperty(exports, "WebApiOnlineMock", { enumerable: true, get: function () { return webapionline_mock_1.WebApiOnlineMock; } });
    Object.defineProperty(exports, "WindowMock", { enumerable: true, get: function () { return window_mock_1.WindowMock; } });
    Object.defineProperty(exports, "XrmStaticMock", { enumerable: true, get: function () { return xrmstatic_mock_1.XrmStaticMock; } });
    Object.defineProperty(exports, "IframeControlMock", { enumerable: true, get: function () { return iframecontrol_mock_1.IframeControlMock; } });
    Object.defineProperty(exports, "QuickFormControlMock", { enumerable: true, get: function () { return quickform_mock_1.QuickFormControlMock; } });
    Object.defineProperty(exports, "AppMock", { enumerable: true, get: function () { return app_mock_2.AppMock; } });
    Object.defineProperty(exports, "KbSearchControlMock", { enumerable: true, get: function () { return kbsearchcontrol_mock_1.KbSearchControlMock; } });
    Object.defineProperty(exports, "TimerControlMock", { enumerable: true, get: function () { return timercontrol_mock_1.TimerControlMock; } });
});
/// <amd-module name="xrm-mock"/>
define("xrm-mock", ["require", "exports", "xrm-mock/index", "xrm-mock-generator/index"], function (require, exports, index_1, index_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrmMockGenerator = void 0;
    __exportStar(index_1, exports);
    Object.defineProperty(exports, "XrmMockGenerator", { enumerable: true, get: function () { return index_2.XrmMockGenerator; } });
});
define("xrm-mock/async/errorcallbackobject/errorcallbackobject.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorCallbackObjectMock = void 0;
    var ErrorCallbackObjectMock = /** @class */ (function () {
        function ErrorCallbackObjectMock(errorCode, message) {
            this.errorCode = errorCode;
            this.message = message;
        }
        return ErrorCallbackObjectMock;
    }());
    exports.ErrorCallbackObjectMock = ErrorCallbackObjectMock;
});
define("xrm-mock/async/offlineerrorcallbackobject/offlineerrorcallbackobject.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OfflineErrorCallbackObjectMock = void 0;
    var OfflineErrorCallbackObjectMock = /** @class */ (function () {
        function OfflineErrorCallbackObjectMock(errorCallbackObject, debugMessage) {
            this.errorCallbackObject = errorCallbackObject;
            this.debugMessage = debugMessage;
            this.errorCode = errorCallbackObject.errorCode;
            this.message = errorCallbackObject.message;
        }
        return OfflineErrorCallbackObjectMock;
    }());
    exports.OfflineErrorCallbackObjectMock = OfflineErrorCallbackObjectMock;
});
define("xrm-mock/async/offlineoperationsuccesscallbackobject/offlineoperationsuccesscallbackobject.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OfflineOperationSuccessCallbackObjectMock = void 0;
    var OfflineOperationSuccessCallbackObjectMock = /** @class */ (function () {
        function OfflineOperationSuccessCallbackObjectMock(id, logicalName) {
            this.id = id;
            this.logicalName = logicalName;
        }
        return OfflineOperationSuccessCallbackObjectMock;
    }());
    exports.OfflineOperationSuccessCallbackObjectMock = OfflineOperationSuccessCallbackObjectMock;
});
define("xrm-mock/async/openquickcreatesuccesscallbackobject/openquickcreatesuccesscallbackobject.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenQuickCreateSuccessCallbackObjectMock = void 0;
    var OpenQuickCreateSuccessCallbackObjectMock = /** @class */ (function () {
        function OpenQuickCreateSuccessCallbackObjectMock(savedEntityReference) {
            this.savedEntityReference = savedEntityReference;
        }
        return OpenQuickCreateSuccessCallbackObjectMock;
    }());
    exports.OpenQuickCreateSuccessCallbackObjectMock = OpenQuickCreateSuccessCallbackObjectMock;
});
define("xrm-mock/async/xrmpromise/xrmpromise.mock", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrmPromiseMock = void 0;
    var XrmPromiseMock = /** @class */ (function () {
        function XrmPromiseMock() {
        }
        XrmPromiseMock.prototype.then = function (onFulfilled, onRejected) {
            throw new Error("Method not implemented.");
        };
        XrmPromiseMock.prototype.fail = function (onRejected) {
            throw new Error("Method not implemented.");
        };
        XrmPromiseMock.prototype.always = function (alwaysCallback) {
            throw new Error("Method not implemented.");
        };
        XrmPromiseMock.prototype.catch = function (onRejected) {
            throw new Error("Method not implemented.");
        };
        XrmPromiseMock.prototype.finally = function (finallyCallback) {
            throw new Error("Method not implemented.");
        };
        return XrmPromiseMock;
    }());
    exports.XrmPromiseMock = XrmPromiseMock;
});
//# sourceMappingURL=index.js.map