"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityMetadataMock = void 0;
var EntityMetadataMock = /** @class */ (function () {
    function EntityMetadataMock(components) {
        this.ActivityTypeMask = components.ActivityTypeMask;
        this.Attributes = components.Attributes;
        this.AutoRouteToOwnerQueue = components.AutoRouteToOwnerQueue;
        this.CanEnableSyncToExternalSearchIndex = components.CanEnableSyncToExternalSearchIndex;
        this.CanBeInManyToMany = components.CanBeInManyToMany;
        this.CanBePrimaryEntityInRelationship = components.CanBePrimaryEntityInRelationship;
        this.CanBeRelatedEntityInRelationship = components.CanBeRelatedEntityInRelationship;
        this.CanCreateAttributes = components.CanCreateAttributes;
        this.CanCreateCharts = components.CanCreateCharts;
        this.CanCreateForms = components.CanCreateForms;
        this.CanCreateViews = components.CanCreateViews;
        this.CanModifyAdditionalSettings = components.CanModifyAdditionalSettings;
        this.CanTriggerWorkflow = components.CanTriggerWorkflow;
        this.Description = components.Description;
        this.DisplayCollectionName = components.DisplayCollectionName;
        this.DisplayName = components.DisplayName;
        this.EntityColor = components.EntityColor;
        this.EntitySetName = components.EntitySetName;
        this.IconLargeName = components.IconLargeName;
        this.IconMediumName = components.IconMediumName;
        this.IconSmallName = components.IconSmallName;
        this.IsActivity = components.IsActivity;
        this.IsActivityParty = components.IsActivityParty;
        this.IsAuditEnabled = components.IsAuditEnabled;
        this.IsAvailableOffline = components.IsAvailableOffline;
        this.IsBPFEntity = components.IsBPFEntity;
        this.IsChildEntity = components.IsChildEntity;
        this.IsConnectionsEnabled = components.IsConnectionsEnabled;
        this.IsCustomEntity = components.IsCustomEntity;
        this.IsCustomizable = components.IsCustomizable;
        this.IsDocumentManagementEnabled = components.IsDocumentManagementEnabled;
        this.IsDuplicateDetectionEnabled = components.IsDuplicateDetectionEnabled;
        this.IsEnabledForCharts = components.IsEnabledForCharts;
        this.IsOneNotIntegrationEnabled = components.IsOneNotIntegrationEnabled;
        this.IsOptimisitcConcurrencyEnabled = components.IsOptimisitcConcurrencyEnabled;
        this.IsQuickCreateEnabled = components.IsQuickCreateEnabled;
        this.IsImportable = components.IsImportable;
        this.IsIntersect = components.IsIntersect;
        this.IsMailMergeEnabled = components.IsMailMergeEnabled;
        this.IsManaged = components.IsManaged;
        this.IsMappable = components.IsMappable;
        this.IsReadingPaneEnabled = components.IsReadingPaneEnabled;
        this.IsRenameable = components.IsRenameable;
        this.IsStateModelAware = components.IsStateModelAware;
        this.IsValidForAdvancedFind = components.IsValidForAdvancedFind;
        this.IsValidForQueue = components.IsValidForQueue;
        this.IsVisibleInMobileClient = components.IsVisibleInMobileClient;
        this.LogicalCollectionName = components.LogicalCollectionName;
        this.LogicalName = components.LogicalName;
        this.ObjectTypeCode = components.ObjectTypeCode;
        this.OwnershipTypeCode = components.OwnershipTypeCode;
        this.PrimaryIdAttribute = components.PrimaryIdAttribute;
        this.PrimaryNameAttribute = components.PrimaryNameAttribute;
        this.RecurrenceBaseEntityLogicalName = components.RecurrenceBaseEntityLogicalName;
        this.PrimaryImageAttribute = components.PrimaryImageAttribute;
    }
    return EntityMetadataMock;
}());
exports.EntityMetadataMock = EntityMetadataMock;
//# sourceMappingURL=entitymetadata.mock.js.map