"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const SetupGlobalContext_1 = require("../../SetupGlobalContext");
describe("XrmWebApiNode CRUD", () => {
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        // Is this running inside NodeJS?
        if (typeof Xrm === "undefined") {
            try {
                // Set up the Node Xrm global context
                yield SetupGlobalContext_1.SetupGlobalContext();
            }
            catch (ex) {
                fail(ex);
            }
        }
    }), 10000);
    test("Delete", () => __awaiter(void 0, void 0, void 0, function* () {
        const record = {
            name: "Sample Account",
        };
        // Create Account
        record.accountid = (yield Xrm.WebApi.createRecord("account", record)).id;
        // Delete account
        if (record.accountid) {
            yield Xrm.WebApi.deleteRecord("account", record.accountid);
        }
        // Check the account has been deleted
        const fetch = `<fetch no-lock="true" >
       <entity name="account" >
         <filter>
           <condition attribute="accountid" operator="eq" value="${record.accountid}" />
         </filter>
       </entity>
     </fetch>`;
        const accounts = yield Xrm.WebApi.retrieveMultipleRecords("account", "?fetchXml=" + fetch);
        expect(accounts.entities.length).toBe(0);
    }), 30000);
});
//# sourceMappingURL=Delete.test.js.map