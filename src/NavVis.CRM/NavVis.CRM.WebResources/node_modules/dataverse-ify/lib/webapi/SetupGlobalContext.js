"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupGlobalContext = void 0;
/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-unused-vars */
const config = require("config");
const XrmStatic_1 = require("./XrmStatic");
let xrmGlobalContextSetup = false;
const defaultConfig = {
    proxy: {
        useproxy: false,
    },
};
function SetupGlobalContext() {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const globalAny = global;
        if (xrmGlobalContextSetup)
            return globalAny.Xrm;
        // Create global Xrm instance so we can simulate the Xrm context
        const configFile = config.get("nodewebapi");
        const xrmConfig = Object.assign(Object.assign({}, defaultConfig), configFile);
        if (xrmConfig.proxy && xrmConfig.proxy.useproxy) {
            // Enable Fiddler - trust the fiddler root self-cert
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const syswidecas = require("syswide-cas");
            syswidecas.addCAs(".\\config\\FiddlerRoot.crt");
            // eslint-disable-next-line @typescript-eslint/camelcase
            process.env.https_proxy = xrmConfig.proxy.httpProxy;
            // eslint-disable-next-line @typescript-eslint/camelcase
            process.env.http_proxy = xrmConfig.proxy.httpProxy;
            //process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"; // Doesn't work in Jest!
        }
        const xrmInstance = yield XrmStatic_1.XrmStatic.createInstance(xrmConfig);
        // If Xrm is already defined by another system (e.g. xrm-mock), then re-use it
        globalAny.Xrm = globalAny.Xrm || xrmInstance;
        // Add the dataverse-ify versions of the Xrm Api
        const overrides = {
            WebApi: xrmInstance.WebApi,
            Utility: xrmInstance.Utility,
        };
        globalAny.Xrm = Object.assign(Object.assign({}, globalAny.Xrm), overrides);
        globalAny.GetGlobalContext = XrmStatic_1.XrmStatic.getGlobalContext;
        globalAny.NodeXrm = XrmStatic_1.XrmStatic;
        xrmGlobalContextSetup = true;
        return globalAny.Xrm;
    });
}
exports.SetupGlobalContext = SetupGlobalContext;
//# sourceMappingURL=SetupGlobalContext.js.map