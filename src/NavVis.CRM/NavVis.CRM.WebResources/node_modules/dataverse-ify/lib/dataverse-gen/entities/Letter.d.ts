import { IEntity } from "../../types/IEntity";
export declare const letterMetadata: {
    typeName: string;
    logicalName: string;
    collectionName: string;
    primaryIdAttribute: string;
    attributeTypes: {
        actualdurationminutes: string;
        exchangerate: string;
        importsequencenumber: string;
        onholdtime: string;
        scheduleddurationminutes: string;
        timezoneruleversionnumber: string;
        utcconversiontimezonecode: string;
        versionnumber: string;
        prioritycode: string;
        statecode: string;
        statuscode: string;
        actualend: string;
        actualstart: string;
        createdon: string;
        lastonholdtime: string;
        modifiedon: string;
        overriddencreatedon: string;
        scheduledend: string;
        scheduledstart: string;
        sortdate: string;
    };
    navigation: {
        stageid_processstage: string[];
        sla_letter_sla: string[];
        ownerid_letter: string[];
        activityid_activitypointer: string[];
        createdby: string[];
        createdonbehalfby: string[];
        modifiedby: string[];
        modifiedonbehalfby: string[];
        owningbusinessunit: string[];
        owningteam: string[];
        owninguser: string[];
        regardingobjectid: string[];
        serviceid: string[];
        slainvokedid: string[];
        transactioncurrencyid: string[];
    };
};
export declare enum LetterAttributes {
    ActivityId = "activityid",
    ActivityTypeCode = "activitytypecode",
    ActualDurationMinutes = "actualdurationminutes",
    ActualEnd = "actualend",
    ActualStart = "actualstart",
    Address = "address",
    bcc = "bcc",
    Category = "category",
    cc = "cc",
    CreatedBy = "createdby",
    CreatedByName = "createdbyname",
    CreatedByYomiName = "createdbyyominame",
    CreatedOn = "createdon",
    CreatedOnBehalfBy = "createdonbehalfby",
    CreatedOnBehalfByName = "createdonbehalfbyname",
    CreatedOnBehalfByYomiName = "createdonbehalfbyyominame",
    Description = "description",
    DirectionCode = "directioncode",
    ExchangeRate = "exchangerate",
    from = "from",
    ImportSequenceNumber = "importsequencenumber",
    IsBilled = "isbilled",
    IsRegularActivity = "isregularactivity",
    IsWorkflowCreated = "isworkflowcreated",
    LastOnHoldTime = "lastonholdtime",
    ModifiedBy = "modifiedby",
    ModifiedByName = "modifiedbyname",
    ModifiedByYomiName = "modifiedbyyominame",
    ModifiedOn = "modifiedon",
    ModifiedOnBehalfBy = "modifiedonbehalfby",
    ModifiedOnBehalfByName = "modifiedonbehalfbyname",
    ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame",
    OnHoldTime = "onholdtime",
    OverriddenCreatedOn = "overriddencreatedon",
    OwnerId = "ownerid",
    OwnerIdName = "owneridname",
    OwnerIdType = "owneridtype",
    OwnerIdYomiName = "owneridyominame",
    OwningBusinessUnit = "owningbusinessunit",
    OwningBusinessUnitName = "owningbusinessunitname",
    OwningTeam = "owningteam",
    OwningUser = "owninguser",
    PriorityCode = "prioritycode",
    ProcessId = "processid",
    RegardingObjectId = "regardingobjectid",
    RegardingObjectIdName = "regardingobjectidname",
    RegardingObjectIdYomiName = "regardingobjectidyominame",
    RegardingObjectTypeCode = "regardingobjecttypecode",
    ScheduledDurationMinutes = "scheduleddurationminutes",
    ScheduledEnd = "scheduledend",
    ScheduledStart = "scheduledstart",
    ServiceId = "serviceid",
    ServiceIdName = "serviceidname",
    SLAId = "slaid",
    SLAInvokedId = "slainvokedid",
    SLAInvokedIdName = "slainvokedidname",
    SLAName = "slaname",
    SortDate = "sortdate",
    StageId = "stageid",
    StateCode = "statecode",
    StatusCode = "statuscode",
    Subcategory = "subcategory",
    Subject = "subject",
    SubscriptionId = "subscriptionid",
    TimeZoneRuleVersionNumber = "timezoneruleversionnumber",
    to = "to",
    TransactionCurrencyId = "transactioncurrencyid",
    TransactionCurrencyIdName = "transactioncurrencyidname",
    TraversedPath = "traversedpath",
    UTCConversionTimeZoneCode = "utcconversiontimezonecode",
    VersionNumber = "versionnumber"
}
export interface Letter extends IEntity {
    activityid?: import("../../types/Guid").Guid | null;
    activitytypecode?: string | null;
    actualdurationminutes?: number | null;
    actualend?: Date | null;
    actualstart?: Date | null;
    address?: string | null;
    bcc?: import("../../types/ActivityParty").ActivityParty[] | null;
    category?: string | null;
    cc?: import("../../types/ActivityParty").ActivityParty[] | null;
    createdby?: import("../../types/EntityReference").EntityReference | null;
    createdbyname?: string | null;
    createdbyyominame?: string | null;
    createdon?: Date | null;
    createdonbehalfby?: import("../../types/EntityReference").EntityReference | null;
    createdonbehalfbyname?: string | null;
    createdonbehalfbyyominame?: string | null;
    description?: string | null;
    directioncode?: boolean | null;
    exchangerate?: number | null;
    from?: import("../../types/ActivityParty").ActivityParty[] | null;
    importsequencenumber?: number | null;
    isbilled?: boolean | null;
    isregularactivity?: boolean | null;
    isworkflowcreated?: boolean | null;
    lastonholdtime?: Date | null;
    modifiedby?: import("../../types/EntityReference").EntityReference | null;
    modifiedbyname?: string | null;
    modifiedbyyominame?: string | null;
    modifiedon?: Date | null;
    modifiedonbehalfby?: import("../../types/EntityReference").EntityReference | null;
    modifiedonbehalfbyname?: string | null;
    modifiedonbehalfbyyominame?: string | null;
    onholdtime?: number | null;
    overriddencreatedon?: Date | null;
    ownerid?: import("../../types/EntityReference").EntityReference | null;
    owneridname?: string | null;
    owneridtype?: string | null;
    owneridyominame?: string | null;
    owningbusinessunit?: import("../../types/EntityReference").EntityReference | null;
    owningbusinessunitname?: string | null;
    owningteam?: import("../../types/EntityReference").EntityReference | null;
    owninguser?: import("../../types/EntityReference").EntityReference | null;
    prioritycode?: import("../enums/letter_letter_prioritycode").letter_letter_prioritycode | null;
    processid?: import("../../types/Guid").Guid | null;
    regardingobjectid?: import("../../types/EntityReference").EntityReference | null;
    regardingobjectidname?: string | null;
    regardingobjectidyominame?: string | null;
    regardingobjecttypecode?: string | null;
    scheduleddurationminutes?: number | null;
    scheduledend?: Date | null;
    scheduledstart?: Date | null;
    serviceid?: import("../../types/EntityReference").EntityReference | null;
    serviceidname?: string | null;
    slaid?: import("../../types/EntityReference").EntityReference | null;
    slainvokedid?: import("../../types/EntityReference").EntityReference | null;
    slainvokedidname?: string | null;
    slaname?: string | null;
    sortdate?: Date | null;
    stageid?: import("../../types/Guid").Guid | null;
    statecode?: import("../enums/letter_letter_statecode").letter_letter_statecode | null;
    statuscode?: import("../enums/letter_letter_statuscode").letter_letter_statuscode | null;
    subcategory?: string | null;
    subject?: string;
    subscriptionid?: import("../../types/Guid").Guid | null;
    timezoneruleversionnumber?: number | null;
    to?: import("../../types/ActivityParty").ActivityParty[] | null;
    transactioncurrencyid?: import("../../types/EntityReference").EntityReference | null;
    transactioncurrencyidname?: string | null;
    traversedpath?: string | null;
    utcconversiontimezonecode?: number | null;
    versionnumber?: number | null;
}
