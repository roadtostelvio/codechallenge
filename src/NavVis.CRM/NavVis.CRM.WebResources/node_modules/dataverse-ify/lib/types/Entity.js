"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const MetadataCache_1 = require("../metadata/MetadataCache");
const EntityReference_1 = require("./EntityReference");
class Entity {
    static containsFields(instance, keys) {
        let allOk = true;
        for (const key of keys) {
            allOk = allOk && instance.hasOwnProperty(key);
            if (!allOk)
                break;
        }
        return allOk;
    }
    static getCollectionNameForEntity(logicalName) {
        return __awaiter(this, void 0, void 0, function* () {
            // Try using the simple collection name lookup
            const collectionName = yield MetadataCache_1.getEntitySetName(logicalName);
            return collectionName;
        });
    }
    static toEntityReference(instance) {
        return new EntityReference_1.EntityReference(instance.logicalName, instance.id);
    }
}
exports.Entity = Entity;
//# sourceMappingURL=Entity.js.map