"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNavigationPathForEntityReference = exports.odatifyEntityReference = void 0;
const Guid_1 = require("./Guid");
const Entity_1 = require("./Entity");
function odatifyEntityReference(entitySetName, id) {
    // We set null ids to string null so we can pick up and run a disassociate
    return `${entitySetName}(${id === null ? "null" : Guid_1.trimGuid(id)})`;
}
exports.odatifyEntityReference = odatifyEntityReference;
function getNavigationPathForEntityReference(entity, attributeLogicalName) {
    return __awaiter(this, void 0, void 0, function* () {
        const entityReference = entity[attributeLogicalName];
        const collectionName = yield Entity_1.Entity.getCollectionNameForEntity(entityReference.entityType);
        if (collectionName) {
            return odatifyEntityReference(collectionName, entityReference.id);
        }
        throw new Error(`Cannot find navigation metadata for ${attributeLogicalName}`);
    });
}
exports.getNavigationPathForEntityReference = getNavigationPathForEntityReference;
//# sourceMappingURL=IEntityReference.js.map