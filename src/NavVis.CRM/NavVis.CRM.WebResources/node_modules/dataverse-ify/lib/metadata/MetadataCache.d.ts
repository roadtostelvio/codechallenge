import { Dictionary } from "../types/Dictionary";
import { EntityWebApiMetadata } from "./EntityWebApiMetadata";
import { WebApiExecuteRequestMetadata } from "./WebApiExecuteRequestMetadata";
import { IEntity } from "../types/IEntity";
export declare let _metadataCache: MetadataCache;
export interface MetadataCache {
    entitySetNames?: Dictionary<string>;
    entities?: Dictionary<EntityWebApiMetadata>;
    actions?: Dictionary<WebApiExecuteRequestMetadata>;
}
export declare function setMetadataCache(metadataCache: MetadataCache): void;
export declare function getMetadataCache(): MetadataCache;
export declare function getMetadataByLogicalName(logicalName: string): EntityWebApiMetadata;
export declare function getMetadataFromEntitySet(entitySetName: string): EntityWebApiMetadata;
export declare function getEntitySetName(entityLogicalName: string): Promise<string>;
export declare function getMetadata(entity: IEntity): EntityWebApiMetadata;
export declare function caseInsensitiveSearch<T>(key: string, values: Dictionary<T>): {
    key: string;
    value: T;
} | undefined;
