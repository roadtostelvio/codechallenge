"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.odataify = void 0;
const MetadataCache_1 = require("../../metadata/MetadataCache");
const StructuralProperty_1 = require("../../types/StructuralProperty");
const odataifyFields_1 = require("./odataifyFields");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function odataify(action, value) {
    return __awaiter(this, void 0, void 0, function* () {
        const metadataCache = MetadataCache_1.getMetadataCache();
        // Is the value an array or Entitycollection?
        if (value.constructor.name === "Array") {
            const odataRecords = [];
            for (const record of value) {
                const value = yield odataify(action, record);
                odataRecords.push(value);
            }
            return odataRecords;
        }
        // EntityCollection
        else if (value.entities !== undefined) {
            const odataValue = yield odataify(action, value.entities);
            return odataValue;
        }
        const logicalName = value.logicalName;
        if (!logicalName) {
            throw new Error("logicalName property not found on object. This is needed to odataify the object.");
        }
        let valueSet = false;
        const metadata = metadataCache.entities && metadataCache.entities[logicalName];
        if (metadata != null) {
            valueSet = true;
            // Entity
            const entityMetadata = metadata;
            const entityValue = value;
            const output = Object.assign({}, entityValue);
            // Add the metadata type
            output["@odata.type"] = "Microsoft.Dynamics.CRM." + logicalName;
            // Remove attributes that are not needed in the OData payload
            delete output.id;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            delete output.logicalName;
            delete output.formattedValues;
            // Change the types for the odata payload
            yield odataifyFields_1.odataifyFields(action, output, entityValue, entityMetadata);
            // Format the Odata ID
            switch (action) {
                case "Update":
                    // Remove the primary key
                    delete output[entityMetadata.primaryIdAttribute];
                    break;
                case "Action":
                    // The primary key must be odatified
                    if (entityValue.id && entityValue.id) {
                        output[`${entityMetadata.primaryIdAttribute}@odata.bind`] = `/${entityMetadata.collectionName}(${entityValue.id.toString()})`;
                    }
                    break;
            }
            return output;
        }
        // Action or Function
        const webApiMetdata = metadataCache.actions && metadataCache.actions[logicalName];
        if (webApiMetdata) {
            valueSet = true;
            // This is a web api action request
            const request = value;
            const webApiRequest = new (class {
                getMetadata() {
                    return webApiMetdata;
                }
            })();
            const requestOdata = Object.assign(webApiRequest, request);
            // Get the parameters
            for (const field of Object.keys(requestOdata)) {
                if (field === "getMetadata" || field === "logicalName")
                    continue;
                // odataify each field if it is an entity
                const fieldValue = requestOdata[field];
                // Get the type from the metadata
                const parameterMetadata = webApiMetdata.parameterTypes[field];
                if (parameterMetadata) {
                    // If Taret - then change to EntityType
                    if (field === "Target" && parameterMetadata.structuralProperty === StructuralProperty_1.StructuralProperty.ComplexType) {
                        parameterMetadata.structuralProperty = StructuralProperty_1.StructuralProperty.EntityType;
                    }
                    switch (parameterMetadata.structuralProperty) {
                        case StructuralProperty_1.StructuralProperty.EnumerationType:
                        case StructuralProperty_1.StructuralProperty.PrimitiveType:
                            requestOdata[field] = fieldValue;
                            break;
                        case StructuralProperty_1.StructuralProperty.Collection:
                            const collection = fieldValue;
                            if (collection && collection.length > 0) {
                                requestOdata[field] = yield odataify("Create", fieldValue);
                            }
                            break;
                        case StructuralProperty_1.StructuralProperty.EntityType:
                            // This is an entity record pointer
                            const fieldValueAsEntityReference = fieldValue;
                            const fieldValueAsEntity = fieldValue;
                            if (fieldValueAsEntityReference.entityType && fieldValueAsEntityReference.id) {
                                // See https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/webapi/use-web-api-functions#pass-reference-to-an-entity-to-a-function
                                requestOdata[field] = fieldValueAsEntityReference; //{'@odata.id':Entity.odatifyEntityReference(collectionName,fieldValueAsEntityReference.id)};
                            }
                            else if (fieldValueAsEntity.logicalName) {
                                requestOdata[field] = yield odataify("Action", fieldValue);
                            }
                            break;
                        case StructuralProperty_1.StructuralProperty.Unknown:
                        default:
                            throw new Error("Unknown parameter type on action.");
                    }
                }
                else {
                    throw new Error(`Unexpected parameter ${field} on execute Request`);
                }
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            delete requestOdata.logicalName;
            return requestOdata;
        }
        if (!valueSet) {
            throw new Error(`Cannot odataify - no metadata found for ${logicalName}`);
        }
    });
}
exports.odataify = odataify;
//# sourceMappingURL=odataify.js.map