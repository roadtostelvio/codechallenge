"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/camelcase */
const __1 = require("../..");
const Account_1 = require("../../../dataverse-gen/entities/Account");
const __2 = require("../../..");
test("sdkify Multiselects", () => __awaiter(void 0, void 0, void 0, function* () {
    __2.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const accountSdk = {
        logicalName: Account_1.accountMetadata.logicalName,
        name: "Account 1",
        cdsify_multiselect: [1 /* Facebook */, 0 /* Other */],
    };
    const odata = yield __1.odataify("Create", accountSdk);
    expect(odata).toBeDefined();
    expect(odata.cdsify_multiselect).toBe("1,0");
    expect(odata.name).toBe("Account 1");
    expect(odata["@odata.type"]).toBe("Microsoft.Dynamics.CRM.account");
}));
test("sdkify Multiselects", () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    __2.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const odataRecord = {
        "@odata.context": "https://org.crm11.dynamics.com/api/data/v9.1/$metadata#accounts/$entity",
        // eslint-disable-next-line quotes
        "@odata.etag": 'W/"24588414"',
        "cdsify_multiselect@OData.Community.Display.V1.FormattedValue": "Facebook",
        cdsify_multiselect: "1,2",
        name: "Account 1",
    };
    const sdkRecord = (yield __1.sdkify(odataRecord, "account"));
    expect(sdkRecord.cdsify_multiselect).toBeDefined();
    expect((_a = sdkRecord.cdsify_multiselect) === null || _a === void 0 ? void 0 : _a.length).toBe(2);
    expect(sdkRecord.cdsify_multiselect && sdkRecord.cdsify_multiselect[0]).toBe(2 /* Twitter */);
    expect(sdkRecord.cdsify_multiselect && sdkRecord.cdsify_multiselect[1]).toBe(1 /* Facebook */);
}));
//# sourceMappingURL=field-multiselect.test.js.map