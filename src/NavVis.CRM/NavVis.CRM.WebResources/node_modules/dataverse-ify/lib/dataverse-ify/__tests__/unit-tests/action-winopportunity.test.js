"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WinOpportunity_1 = require("../../../dataverse-gen/actions/WinOpportunity");
const OpportunityClose_1 = require("../../../dataverse-gen/entities/OpportunityClose");
const odataify_1 = require("../../odataify/odataify");
const types_1 = require("../../../types");
const metadata_1 = require("../../../metadata");
const Opportunity_1 = require("../../../dataverse-gen/entities/Opportunity");
test("odataify winopportunty", () => __awaiter(void 0, void 0, void 0, function* () {
    metadata_1.setMetadataCache({
        entities: {
            opportunity: Opportunity_1.opportunityMetadata,
            opportunityclose: OpportunityClose_1.opportunitycloseMetadata,
        },
        actions: { WinOpportunity: WinOpportunity_1.WinOpportunityMetadata },
    });
    const winRequest = {
        logicalName: WinOpportunity_1.WinOpportunityMetadata.operationName,
        Status: 3,
        OpportunityClose: {
            logicalName: OpportunityClose_1.opportunitycloseMetadata.logicalName,
            description: "Sample Opportunity Close",
            subject: "Sample",
            opportunityid: new types_1.EntityReference(Opportunity_1.opportunityMetadata.logicalName, "5deb00bd-5685-ea11-a812-000d3a7f4cf5"),
        },
    };
    const odata = yield odataify_1.odataify("Action", winRequest);
    const expected = {
        Status: 3,
        OpportunityClose: {
            description: "Sample Opportunity Close",
            subject: "Sample",
            "@odata.type": "Microsoft.Dynamics.CRM.opportunityclose",
            "opportunityid@odata.bind": "opportunities(5deb00bd-5685-ea11-a812-000d3a7f4cf5)",
        },
    };
    expect(JSON.stringify(odata)).toBe(JSON.stringify(expected));
    expect(odata.getMetadata).toBeDefined();
    const metadata = odata.getMetadata();
    const expectedMetadata = {
        parameterTypes: {
            OpportunityClose: { typeName: "mscrm.opportunityclose", structuralProperty: 5 },
            Caller: { typeName: "Edm.String", structuralProperty: 1 },
            Status: { typeName: "Edm.Int32", structuralProperty: 1 },
        },
        operationType: 0,
        operationName: "WinOpportunity",
    };
    expect(JSON.stringify(metadata)).toBe(JSON.stringify(expectedMetadata));
}));
//# sourceMappingURL=action-winopportunity.test.js.map