"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SetupGlobalContext_1 = require("../../../webapi/SetupGlobalContext");
const MetadataCache_1 = require("../../../metadata/MetadataCache");
const Account_1 = require("../../../dataverse-gen/entities/Account");
const __1 = require("../..");
const Entity_1 = require("../../../types/Entity");
const config = require("config");
const Contact_1 = require("../../../dataverse-gen/entities/Contact");
const Opportunity_1 = require("../../../dataverse-gen/entities/Opportunity");
describe("customer", () => {
    const configFile = config.get("nodewebapi");
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        // Is this running inside NodeJS?
        if (typeof Xrm === "undefined") {
            try {
                // Set up the Node Xrm global context
                yield SetupGlobalContext_1.SetupGlobalContext();
            }
            catch (ex) {
                fail(ex);
            }
        }
    }), 30000);
    test("Customer fields set and retrieved as EntityReference", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        if (!configFile.runIntegrationTests)
            return;
        MetadataCache_1.setMetadataCache({
            entities: {
                account: Account_1.accountMetadata,
                contact: Contact_1.contactMetadata,
                opportunity: Opportunity_1.opportunityMetadata,
            },
        });
        const account1 = {
            logicalName: Account_1.accountMetadata.logicalName,
            name: "Account 1",
        };
        const contact1 = {
            logicalName: "contact",
            firstname: "Test",
            lastname: "Unit",
        };
        const opportunity1 = {
            logicalName: Opportunity_1.opportunityMetadata.logicalName,
            name: "Opportunity 1",
        };
        const cdsServiceClient = new __1.XrmContextCdsServiceClient(Xrm.WebApi);
        try {
            // Create account
            account1.id = yield cdsServiceClient.create(account1);
            // Assign parent customer
            opportunity1.customerid = Entity_1.Entity.toEntityReference(account1);
            // Create opportunity
            opportunity1.id = yield cdsServiceClient.create(opportunity1);
            // Retrieve and check parent customerid field
            const opportunityRetreived = (yield cdsServiceClient.retrieve(opportunity1.logicalName, opportunity1.id, [
                "customerid",
            ]));
            expect(opportunityRetreived.customerid).toBeDefined();
            expect((_a = opportunityRetreived.customerid) === null || _a === void 0 ? void 0 : _a.id).toBe(account1.id);
            expect((_b = opportunityRetreived.customerid) === null || _b === void 0 ? void 0 : _b.entityType).toBe("account");
            expect((_c = opportunityRetreived.customerid) === null || _c === void 0 ? void 0 : _c.name).toBe(account1.name);
            // Update to be parented by a contact
            contact1.id = yield cdsServiceClient.create(contact1);
            opportunity1.customerid = Entity_1.Entity.toEntityReference(contact1);
            yield cdsServiceClient.update(opportunity1);
            // Retrieve and check parent customerid field
            const opportunityRetreived2 = (yield cdsServiceClient.retrieve(opportunity1.logicalName, opportunity1.id, [
                "customerid",
            ]));
            expect(opportunityRetreived2.customerid).toBeDefined();
            expect((_d = opportunityRetreived2.customerid) === null || _d === void 0 ? void 0 : _d.id).toBe(contact1.id);
            expect((_e = opportunityRetreived2.customerid) === null || _e === void 0 ? void 0 : _e.entityType).toBe("contact");
        }
        catch (ex) {
            fail(ex);
        }
        finally {
            if (opportunity1.id) {
                // Tidy up
                yield cdsServiceClient.delete(opportunity1);
            }
            if (account1.id) {
                // Tidy up
                yield cdsServiceClient.delete(account1);
            }
            if (contact1.id) {
                // Tidy up
                yield cdsServiceClient.delete(contact1);
            }
        }
    }), 30000);
});
//# sourceMappingURL=customer.test.js.map