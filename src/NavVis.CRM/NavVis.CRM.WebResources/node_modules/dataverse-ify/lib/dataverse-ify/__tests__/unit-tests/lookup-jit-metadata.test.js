"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/camelcase */
const Account_1 = require("../../../dataverse-gen/entities/Account");
const __1 = require("../../..");
const XrmStatic_1 = require("../../../webapi/XrmStatic");
const webapi_1 = require("../../../webapi");
const sdkify_1 = require("../../sdkify/sdkify");
test("odataify lookups - pascal case navigation property", () => __awaiter(void 0, void 0, void 0, function* () {
    __1.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const account = {
        logicalName: Account_1.accountMetadata.logicalName,
        cdsify_account1: new __1.EntityReference(Account_1.accountMetadata.logicalName, "123"),
    };
    global.Xrm = new XrmStatic_1.XrmStatic();
    Xrm.Utility = new webapi_1.NodeXrmUtilityStatic();
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Xrm.Utility.getEntityMetadata = jest.fn().mockImplementation((entityName, _attributes) => {
        switch (entityName) {
            case "resource":
                return {
                    EntitySetName: "Resources",
                };
            default:
                return null;
        }
    });
    const odataEntity = yield __1.odataify("Create", account);
    expect(odataEntity).toBeDefined();
    if (odataEntity) {
        expect(odataEntity["cdsify_Account1@odata.bind"]).toEqual("accounts(123)");
    }
}));
test("sdkify lookups - pascal case navigation property", () => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    __1.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const account = {
        accountid: "123",
        _cdsify_account1_value: "123",
        "_cdsify_account1_value@Microsoft.Dynamics.CRM.associatednavigationproperty": "cdsify_Account1",
        "_cdsify_account1_value@Microsoft.Dynamics.CRM.lookuplogicalname": "account",
    };
    const sdkAccount = (yield sdkify_1.sdkify(account, Account_1.accountMetadata.logicalName));
    expect(sdkAccount.cdsify_account1).toBeDefined();
    expect((_a = sdkAccount.cdsify_account1) === null || _a === void 0 ? void 0 : _a.id).toEqual("123");
    expect((_b = sdkAccount.cdsify_account1) === null || _b === void 0 ? void 0 : _b.entityType).toEqual("account");
}));
//# sourceMappingURL=lookup-jit-metadata.test.js.map