"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SetupGlobalContext_1 = require("../../../webapi/SetupGlobalContext");
const __1 = require("../..");
const ActivityParty_1 = require("../../../types/ActivityParty");
const Entity_1 = require("../../../types/Entity");
const MetadataCache_1 = require("../../../metadata/MetadataCache");
const config = require("config");
const Account_1 = require("../../../dataverse-gen/entities/Account");
const Letter_1 = require("../../../dataverse-gen/entities/Letter");
describe("activity", () => {
    const configFile = config.get("nodewebapi");
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        // Is this running inside NodeJS?
        if (typeof Xrm === "undefined") {
            try {
                // Set up the Node Xrm global context
                yield SetupGlobalContext_1.SetupGlobalContext();
            }
            catch (ex) {
                fail(ex);
            }
        }
    }), 30000);
    test("Create Activity with Activity Parties.", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!configFile.runIntegrationTests)
            return;
        MetadataCache_1.setMetadataCache({
            entities: {
                account: Account_1.accountMetadata,
                letter: Letter_1.letterMetadata,
                activityparty: ActivityParty_1.activitypartyMetadata,
            },
        });
        const account1 = {
            logicalName: "account",
            name: "Account 1",
        };
        const letter1 = {
            logicalName: "letter",
            subject: `Sample Letter ${new Date().toUTCString()}`,
        };
        const cdsServiceClient = new __1.XrmContextCdsServiceClient(Xrm.WebApi);
        try {
            // Create
            account1.id = yield cdsServiceClient.create(account1);
            const account1Ref = Entity_1.Entity.toEntityReference(account1);
            letter1.regardingobjectid = account1Ref;
            letter1.to = [{ logicalName: "activityparty", partyid: account1Ref }];
            if (account1.id) {
                letter1.id = yield cdsServiceClient.create(letter1);
            }
            // Retrieve
            if (letter1.id) {
                const letterRetrieved = (yield cdsServiceClient.retrieve("letter", letter1.id, ["subject", "to"]));
                expect(letterRetrieved.subject).toBe(letter1.subject);
                expect((_a = letterRetrieved.regardingobjectid) === null || _a === void 0 ? void 0 : _a.id).toBe((_b = letterRetrieved.regardingobjectid) === null || _b === void 0 ? void 0 : _b.id);
                expect(letterRetrieved.to).toBeDefined();
                if (letterRetrieved.to) {
                    expect((_c = letterRetrieved.to[0].partyid) === null || _c === void 0 ? void 0 : _c.id).toBe(account1.id);
                }
            }
            // Add bcc
            letter1.bcc = [{ logicalName: "activityparty", partyid: account1Ref }];
            yield cdsServiceClient.update(letter1);
            // Retrieve again to check bcc
            if (letter1.id) {
                const letterRetrieved = (yield cdsServiceClient.retrieve("letter", letter1.id, ["subject", "to"]));
                expect(letterRetrieved.subject).toBe(letter1.subject);
                expect((_d = letterRetrieved.regardingobjectid) === null || _d === void 0 ? void 0 : _d.id).toBe((_e = letterRetrieved.regardingobjectid) === null || _e === void 0 ? void 0 : _e.id);
                expect(letterRetrieved.to).toBeDefined();
                if (letterRetrieved.to) {
                    expect((_f = letterRetrieved.to[0].partyid) === null || _f === void 0 ? void 0 : _f.id).toBe(account1.id);
                }
                expect(letterRetrieved.bcc).toBeDefined();
                if (letterRetrieved.bcc) {
                    expect((_g = letterRetrieved.bcc[0].partyid) === null || _g === void 0 ? void 0 : _g.id).toBe(account1.id);
                }
            }
        }
        catch (ex) {
            fail(ex);
        }
        finally {
            if (letter1.id) {
                // Tidy up
                // Retry once if we get Sql ErrorCode: -2146232060 Sql Number: 1205 - DeadLock
                try {
                    yield cdsServiceClient.delete(letter1);
                }
                catch (ex) {
                    yield cdsServiceClient.delete(letter1);
                }
            }
            if (account1.id) {
                // Tidy up
                try {
                    yield cdsServiceClient.delete(account1);
                }
                catch (ex) {
                    yield cdsServiceClient.delete(account1);
                }
            }
        }
    }), 30000);
});
//# sourceMappingURL=activity.test.js.map