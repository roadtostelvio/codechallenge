"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SetupGlobalContext_1 = require("../../../webapi/SetupGlobalContext");
const MetadataCache_1 = require("../../../metadata/MetadataCache");
const Account_1 = require("../../../dataverse-gen/entities/Account");
const __1 = require("../..");
const Entity_1 = require("../../../types/Entity");
const config = require("config");
const Opportunity_1 = require("../../../dataverse-gen/entities/Opportunity");
const OpportunityClose_1 = require("../../../dataverse-gen/entities/OpportunityClose");
const WinOpportunity_1 = require("../../../dataverse-gen/actions/WinOpportunity");
describe("winopportunity", () => {
    const configFile = config.get("nodewebapi");
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        // Is this running inside NodeJS?
        if (typeof Xrm === "undefined") {
            try {
                // Set up the Node Xrm global context
                yield SetupGlobalContext_1.SetupGlobalContext();
            }
            catch (ex) {
                fail(ex);
            }
        }
    }), 30000);
    test("WinOpportunity", () => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        MetadataCache_1.setMetadataCache({
            entities: {
                account: Account_1.accountMetadata,
                opportunity: Opportunity_1.opportunityMetadata,
                opportunityclose: OpportunityClose_1.opportunitycloseMetadata,
            },
            actions: { WinOpportunity: WinOpportunity_1.WinOpportunityMetadata },
        });
        const account1 = {
            logicalName: Account_1.accountMetadata.logicalName,
            name: "Account 1",
        };
        const opportunity1 = {
            logicalName: Opportunity_1.opportunityMetadata.logicalName,
            name: "Opportunity 1",
        };
        const cdsServiceClient = new __1.XrmContextCdsServiceClient(Xrm.WebApi);
        try {
            // Create account
            account1.id = yield cdsServiceClient.create(account1);
            // Assign parent customer
            opportunity1.customerid = Entity_1.Entity.toEntityReference(account1);
            // Create opportunity
            opportunity1.id = yield cdsServiceClient.create(opportunity1);
            // WinOpportunity
            const winRequest = {
                logicalName: WinOpportunity_1.WinOpportunityMetadata.operationName,
                Status: 3,
                OpportunityClose: {
                    logicalName: OpportunityClose_1.opportunitycloseMetadata.logicalName,
                    description: "Sample Opportunity Close",
                    subject: "Sample",
                    opportunityid: Entity_1.Entity.toEntityReference(opportunity1),
                },
            };
            const winResponse = yield cdsServiceClient.execute(winRequest);
            expect(winResponse).toBeUndefined();
            // Get the opportunity to check it is won
            // Retrieve Updated
            const opportunityWon = yield cdsServiceClient.retrieve(Opportunity_1.opportunityMetadata.logicalName, opportunity1.id, [Opportunity_1.OpportunityAttributes.StateCode]);
            // eslint-disable-next-line @typescript-eslint/camelcase
            expect(opportunityWon.statecode).toBe(1 /* Won */);
        }
        catch (ex) {
            fail(ex);
        }
        finally {
            if (opportunity1.id) {
                // Tidy up
                yield cdsServiceClient.delete(opportunity1);
            }
            if (account1.id) {
                // Tidy up
                yield cdsServiceClient.delete(account1);
            }
        }
    }), 30000);
});
//# sourceMappingURL=winopportunity.test.js.map