"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/camelcase */
const Account_1 = require("../../../dataverse-gen/entities/Account");
const metadata_1 = require("../../../metadata");
const odataify_1 = require("../../odataify/odataify");
const sdkify_1 = require("../../sdkify/sdkify");
test("Set String, Integer, Double, Money, Date Attributes", () => __awaiter(void 0, void 0, void 0, function* () {
    metadata_1.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const accountSdk = {
        id: "1234",
        logicalName: Account_1.accountMetadata.logicalName,
        name: "Account 1",
        address1_utcoffset: 123.45,
        address1_latitude: 123.456,
        revenue: 456.78,
        lastonholdtime: new Date("2020-04-01T09:00:00.000Z"),
    };
    const accountOdata = yield odataify_1.odataify("Create", accountSdk);
    expect(accountOdata).toBeDefined();
    const expectedOdata = {
        name: "Account 1",
        address1_utcoffset: 123,
        address1_latitude: 123.456,
        revenue: 456.78,
        lastonholdtime: "2020-04-01T09:00:00.000Z",
        "@odata.type": "Microsoft.Dynamics.CRM.account",
    };
    expect(JSON.stringify(accountOdata)).toBe(JSON.stringify(expectedOdata));
}));
test("Empty String, Integer, Double, Money, Date Attributes", () => __awaiter(void 0, void 0, void 0, function* () {
    metadata_1.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const accountSdk = {
        logicalName: Account_1.accountMetadata.logicalName,
        name: undefined,
        address1_utcoffset: undefined,
        address1_latitude: undefined,
        revenue: undefined,
        lastonholdtime: undefined,
    };
    const accountOdata = yield odataify_1.odataify("Create", accountSdk);
    expect(accountOdata).toBeDefined();
    const expectedOdata = {
        name: null,
        address1_utcoffset: null,
        address1_latitude: null,
        revenue: null,
        lastonholdtime: null,
        "@odata.type": "Microsoft.Dynamics.CRM.account",
    };
    expect(JSON.stringify(accountOdata)).toBe(JSON.stringify(expectedOdata));
}));
test("sdkify Date fields", () => __awaiter(void 0, void 0, void 0, function* () {
    metadata_1.setMetadataCache({ entities: { account: Account_1.accountMetadata } });
    const accountOdata = {
        "@odata.context": "https://develop1v9demo.crm11.dynamics.com/api/data/v9.1/$metadata#accounts/$entity",
        // eslint-disable-next-line quotes
        "@odata.etag": 'W/"24587310"',
        "address1_latitude@OData.Community.Display.V1.FormattedValue": "1.00000",
        name: "Account 1",
        "modifiedon@OData.Community.Display.V1.FormattedValue": "23/04/2020 09:59",
        modifiedon: "2020-04-23T09:59:45.000Z",
    };
    const sdkRecord = (yield sdkify_1.sdkify(accountOdata, "account"));
    expect(sdkRecord.modifiedon).toBeDefined();
    if (sdkRecord.modifiedon) {
        const utcDate = new Date(sdkRecord.modifiedon.getUTCFullYear(), sdkRecord.modifiedon.getUTCMonth(), sdkRecord.modifiedon.getUTCDate(), sdkRecord.modifiedon.getUTCHours(), sdkRecord.modifiedon.getUTCMinutes(), sdkRecord.modifiedon.getUTCSeconds());
        expect(utcDate.getFullYear()).toBe(2020);
        expect(utcDate.getHours()).toBe(9); // Returns local date but we converted to UTC
    }
}));
//# sourceMappingURL=field-primitive.test.js.map