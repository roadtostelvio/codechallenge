"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SetupGlobalContext_1 = require("../../../webapi/SetupGlobalContext");
const MetadataCache_1 = require("../../../metadata/MetadataCache");
const __1 = require("../..");
const Entity_1 = require("../../../types/Entity");
const config = require("config");
const Account_1 = require("../../../dataverse-gen/entities/Account");
const CalculateRollupField_1 = require("../../../dataverse-gen/functions/CalculateRollupField");
describe("calculaterollpfield", () => {
    const configFile = config.get("nodewebapi");
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        // Is this running inside NodeJS?
        if (typeof Xrm === "undefined") {
            try {
                // Set up the Node Xrm global context
                yield SetupGlobalContext_1.SetupGlobalContext();
            }
            catch (ex) {
                fail(ex);
            }
        }
    }), 30000);
    test("CalculateRollupField", () => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        MetadataCache_1.setMetadataCache({
            entities: { account: Account_1.accountMetadata },
            actions: { CalculateRollupField: CalculateRollupField_1.CalculateRollupFieldMetadata },
        });
        const account1 = {
            logicalName: Account_1.accountMetadata.logicalName,
            name: "Account 1",
        };
        const cdsServiceClient = new __1.XrmContextCdsServiceClient(Xrm.WebApi);
        try {
            // Create Account
            account1.id = yield cdsServiceClient.create(account1);
            // Calculate Rollup field openddeals
            const request = {
                logicalName: CalculateRollupField_1.CalculateRollupFieldMetadata.operationName,
                FieldName: "opendeals",
                Target: Entity_1.Entity.toEntityReference(account1),
            };
            const response = yield cdsServiceClient.execute(request);
            expect(response).toBeDefined();
        }
        catch (ex) {
            fail(ex);
        }
        finally {
            if (account1.id) {
                // Tidy up
                yield cdsServiceClient.delete(account1);
            }
        }
    }), 30000);
});
//# sourceMappingURL=calculaterollupfield.test.js.map