"use strict";
/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/camelcase */
/* eslint-disable @typescript-eslint/no-explicit-any */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SetupGlobalContext_1 = require("../../../webapi/SetupGlobalContext");
const MetadataCache_1 = require("../../../metadata/MetadataCache");
const Account_1 = require("../../../dataverse-gen/entities/Account");
const whoAmI_1 = require("../../../webapi/whoAmI");
const EntityReference_1 = require("../../../types/EntityReference");
const XrmContextServiceClient_1 = require("../../CdsServiceClient/XrmContextServiceClient");
const config = require("config");
describe("create", () => {
    const configFile = config.get("nodewebapi");
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!configFile.runIntegrationTests)
            return;
        // Is this running inside NodeJS?
        if (typeof Xrm === "undefined") {
            try {
                // Set up the Node Xrm global context
                yield SetupGlobalContext_1.SetupGlobalContext();
            }
            catch (ex) {
                fail(ex);
            }
        }
    }), 10000);
    test("Create an account", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!configFile.runIntegrationTests)
            return;
        const userId = yield whoAmI_1.whoAmI();
        // Create an account with sdk types
        MetadataCache_1.setMetadataCache({
            entities: {
                account: Account_1.accountMetadata,
            },
        });
        const account1 = {
            logicalName: Account_1.accountMetadata.logicalName,
            name: "Account 1",
            // Optionset
            accountcategorycode: 1 /* PreferredCustomer */,
            // Money
            creditlimit: 100,
            // Double
            address1_latitude: 1.0,
            // Integer (check forced to int)
            address1_utcoffset: 1.5,
            // DateTime
            lastonholdtime: new Date(),
            // EntityReference
            preferredsystemuserid: new EntityReference_1.EntityReference("systemuser", userId),
            // MutliSelect
            cdsify_multiselect: [2 /* Twitter */, 1 /* Facebook */],
        };
        // Create
        const cdsServiceClient = new XrmContextServiceClient_1.XrmContextCdsServiceClient(Xrm.WebApi);
        account1.accountid = yield cdsServiceClient.create(account1);
        expect(account1.accountid).toBeDefined();
        if (!account1.accountid) {
            fail();
        }
        // Retrieve
        const account1Retreived = (yield cdsServiceClient.retrieve("account", account1.accountid, true));
        expect(account1Retreived.name).toBe(account1.name);
        expect(account1Retreived.accountcategorycode).toBe(account1.accountcategorycode);
        expect(account1Retreived.creditlimit).toBe(account1.creditlimit);
        expect(account1Retreived.address1_latitude).toBe(account1.address1_latitude);
        expect((_a = account1Retreived.lastonholdtime) === null || _a === void 0 ? void 0 : _a.toLocaleDateString()).toBe((_b = account1 === null || account1 === void 0 ? void 0 : account1.lastonholdtime) === null || _b === void 0 ? void 0 : _b.toLocaleDateString());
        expect((_c = account1Retreived.preferredsystemuserid) === null || _c === void 0 ? void 0 : _c.id).toBe((_d = account1.preferredsystemuserid) === null || _d === void 0 ? void 0 : _d.id);
        expect((_e = account1Retreived.preferredsystemuserid) === null || _e === void 0 ? void 0 : _e.entityType).toBe((_f = account1.preferredsystemuserid) === null || _f === void 0 ? void 0 : _f.entityType);
        expect((_g = account1Retreived.preferredsystemuserid) === null || _g === void 0 ? void 0 : _g.name).toBeDefined();
        // Update
        account1.name = "Updated Name";
        yield cdsServiceClient.update(account1);
        // Retrieve Updated
        const account1Retreived2 = (yield cdsServiceClient.retrieve("account", account1.accountid, true));
        expect(account1Retreived2.name).toBe("Updated Name");
        // Delete
        yield cdsServiceClient.delete("account", account1.accountid);
    }), 10000);
});
//# sourceMappingURL=CRUD.test.js.map